@model List<StorageWithVMsDto>

@if (ViewBag.Warning is string warningMessage)
{
    <div class="alert alert-warning">
        <strong>⚠ Warning:</strong> @warningMessage
    </div>
}

<h2>Proxmox Storage</h2>

@foreach (var storage in Model)
{
    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>@storage.StorageName</strong>
            <button type="button"
                    class="btn btn-sm btn-primary"
                    data-bs-toggle="modal"
                    data-bs-target="#backupModal"
                    data-storage="@storage.StorageName"
                    data-cluster="@storage.ClusterId"
                    data-controllerid="@storage.NetappControllerId"
                    data-replicable="@storage.IsReplicable">
                Backup Now
            </button>
        </div>
        <div class="card-body">
            @if (storage.VMs.Any())
            {
                <ul class="list-group">
                    @foreach (var vm in storage.VMs)
                    {
                        <li class="list-group-item">
                            VM ID: @vm.Id – @vm.Name
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">No VMs in this storage.</p>
            }
        </div>
    </div>
}

<div class="modal fade" id="backupModal" tabindex="-1" aria-labelledby="backupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form asp-controller="Backup" asp-action="StartBackupNow" method="post" id="backupNowForm">
            <input type="hidden" name="StorageName" id="modalStorageName" />
            <input type="hidden" name="ClusterId" id="modalClusterId" />
            <input type="hidden" name="ControllerId" id="modalControllerId" />
            <input type="hidden" name="ScheduleId" value="999" />

            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="backupModalLabel">Run Backup Now</h5>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <!-- Backup Type -->
                    <div class="mb-3">
                        <label class="form-label">Backup Type</label><br />
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="IsApplicationAware" value="false" checked />
                            <label class="form-check-label">Crash-Consistent</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="IsApplicationAware" value="true" id="appAwareRadio" />
                            <label class="form-check-label" for="appAwareRadio">Application-Aware</label>
                        </div>
                        <div id="appAwareOptions" class="border rounded p-3 mt-3 bg-light d-none">
                            <label class="form-label">App-Aware Options</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="EnableIoFreeze" id="EnableIoFreeze" value="true" />
                                <label class="form-check-label" for="EnableIoFreeze">Enable IO-Freeze</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="UseProxmoxSnapshot" id="UseProxmoxSnapshot" value="true" />
                                <label class="form-check-label" for="UseProxmoxSnapshot">Create Proxmox Snapshot</label>
                            </div>
                            <div id="proxmoxSnapshotOptions" class="mt-2 ms-3 d-none">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="WithMemory" id="WithMemory" value="true" />
                                    <label class="form-check-label" for="WithMemory">Include RAM (With Memory)</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- SnapMirror Label -->
                    <div class="mb-3">
                        <label for="LabelSelect" class="form-label">Snapmirror Label</label>
                        <select id="LabelSelect" name="Label" class="form-select">
                            <option value="Manual">Manual</option>
                            <option value="hourly">hourly</option>
                            <option value="daily">daily</option>
                            <option value="weekly">weekly</option>
                        </select>
                    </div>

                    <!-- Retention -->
                    <div class="mb-3">
                        <label class="form-label">Retention</label>
                        <div class="input-group">
                            <input type="number" name="RetentionCount" class="form-control" min="1" max="999" value="7" />
                            <select name="RetentionUnit" class="form-select">
                                <option value="Hours">Hours</option>
                                <option value="Days" selected>Days</option>
                                <option value="Weeks">Weeks</option>
                            </select>
                        </div>
                        <small class="form-text text-muted">
                            How long to keep this snapshot before cleanup.
                        </small>
                    </div>

                    <!-- Replicate to Secondary -->
                    <div class="mb-3 form-check d-none" id="replicateCheckbox">
                        <input class="form-check-input" type="checkbox" name="ReplicateToSecondary" id="ReplicateToSecondaryToggle" value="true" />
                        <label class="form-check-label" for="ReplicateToSecondaryToggle">
                            Replicate to Secondary
                        </label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Run Now</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
          const appAwareRadios   = document.querySelectorAll("input[name='IsApplicationAware']");
          const optionsContainer = document.getElementById("appAwareOptions");
          const proxmoxCheckbox  = document.getElementById("UseProxmoxSnapshot");
          const proxmoxOptions   = document.getElementById("proxmoxSnapshotOptions");
          const freezeCheckbox   = document.getElementById("EnableIoFreeze");
          const replicateBox     = document.getElementById("replicateCheckbox");
          const replicateToggle  = document.getElementById("ReplicateToSecondaryToggle");
          const labelSelect      = document.getElementById("LabelSelect");

          function updateVisibility() {
            const sel = [...appAwareRadios].find(r => r.checked);
            optionsContainer.classList.toggle("d-none", sel?.value !== "true");
          }

          function updateSnapshotOptions() {
            const useSnap = proxmoxCheckbox.checked;
            proxmoxOptions.classList.toggle("d-none", !useSnap);
            if (useSnap && freezeCheckbox.checked) {
              freezeCheckbox.checked = false;
            }
          }

          function handleFreezeToggle() {
            if (freezeCheckbox.checked && proxmoxCheckbox.checked) {
              proxmoxCheckbox.checked = false;
              proxmoxOptions.classList.add("d-none");
            }
          }

          function updateReplicateVisibility(isReplicable) {
            // always clear the checkbox when hiding
            if (!isReplicable || labelSelect.value === "Manual") {
              replicateBox.classList.add("d-none");
              replicateToggle.checked = false;
            } else {
              replicateBox.classList.remove("d-none");
            }
          }

          const backupModal = document.getElementById('backupModal');
          backupModal.addEventListener('show.bs.modal', function (event) {
            const btn = event.relatedTarget;
            // reset replicate ALWAYS
            replicateToggle.checked = false;
            replicateBox.classList.add("d-none");

            // populate hidden fields
            document.getElementById('modalStorageName').value  = btn.getAttribute('data-storage');
            document.getElementById('modalClusterId').value    = btn.getAttribute('data-cluster');
            document.getElementById('modalControllerId').value = btn.getAttribute('data-controllerid');

            // reset label to Manual
            labelSelect.value = "Manual";

            const isRep = btn.getAttribute('data-replicable') === 'True'
                        || btn.getAttribute('data-replicable') === 'true';

            // set initial replicate visibility
            updateReplicateVisibility(isRep);

            // re-check on label change
            labelSelect.onchange = () => updateReplicateVisibility(isRep);
          });

          appAwareRadios.forEach(r => r.addEventListener("change", updateVisibility));
          proxmoxCheckbox.addEventListener("change", updateSnapshotOptions);
          freezeCheckbox.addEventListener("change", handleFreezeToggle);

          // init on load
          updateVisibility();
          updateSnapshotOptions();
        });
    </script>
}
