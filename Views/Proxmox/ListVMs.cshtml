@model List<StorageWithVMsDto>

@if (ViewBag.Warning is string warningMessage)
{
    <div class="alert alert-warning">
        <strong>⚠ Warning:</strong> @warningMessage
    </div>
}

<h2 class="mb-3">Proxmox Storage</h2>

<!-- Global VM Search -->
<div class="input-group mb-4">
    <span class="input-group-text">Search VMs</span>
    <input type="text" id="vmSearch" class="form-control" placeholder="Search by VM name or ID…">
    <button type="button" id="vmSearchClear" class="btn btn-outline-secondary">Clear</button>
</div>

@foreach (var storage in Model.Select((s, i) => new { Item = s, Index = i }))
{
    var s = storage.Item;
    var idx = storage.Index;
    var collapseId = $"store-{idx}-collapse";
    var headingId = $"store-{idx}-heading";
    var vmCount = s.VMs?.Count ?? 0;

    <div class="card mb-3 storage-card" data-storage-name="@s.StorageName">
        <div class="card-header d-flex flex-wrap justify-content-between align-items-center gap-2" id="@headingId">
            <div class="d-flex align-items-center gap-2">
                <button class="btn btn-sm btn-outline-secondary"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#@collapseId"
                        aria-expanded="false"
                        aria-controls="@collapseId">
                    <span class="collapse-label">Show VMs</span>
                </button>
                <strong>@s.StorageName</strong>
                <span class="badge bg-secondary ms-1 total-count">@vmCount</span>
                <span class="badge bg-info d-none ms-1 match-count" title="Matching VMs in this storage">0</span>
            </div>

            <div class="d-flex align-items-center gap-2">
                <button type="button"
                        class="btn btn-sm btn-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#backupModal"
                        data-storage="@s.StorageName"
                        data-cluster="@s.ClusterId"
                        data-controllerid="@s.NetappControllerId"
                        data-replicable="@s.IsReplicable.ToString().ToLower()"
                        data-snapshotlockingenabled="@(s.SnapshotLockingEnabled ? "true" : "false")">
                    Backup Now
                </button>
            </div>
        </div>

        <div id="@collapseId" class="collapse" aria-labelledby="@headingId">
            <div class="card-body">
                @if (s.VMs.Any())
                {
                    <ul class="list-group vm-list" data-storage="@s.StorageName">
                        @foreach (var vm in s.VMs)
                        {
                            <li class="list-group-item vm-row"
                                data-vm-id="@vm.Id"
                                data-vm-name="@vm.Name">
                                <span class="vm-text">VM ID: @vm.Id – @vm.Name</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted mb-0">No VMs in this storage.</p>
                }
            </div>
        </div>
    </div>
}

<!-- ===========================
     MODAL (single, shared)
============================= -->
<div class="modal fade" id="backupModal" tabindex="-1" aria-labelledby="backupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form asp-controller="Backup"
              asp-action="StartBackupNow"
              method="post"
              id="backupNowForm">

            <!-- Hidden fields populated on open -->
            <input type="hidden" name="StorageName" id="modalStorageName" />
            <input type="hidden" name="ClusterId" id="modalClusterId" />
            <input type="hidden" name="ControllerId" id="modalControllerId" />
            <input type="hidden" name="ScheduleId" value="999" />

            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="backupModalLabel">Run Backup Now</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <!-- ==================== Backup Type ==================== -->
                    <div class="mb-3">
                        <label class="form-label">Backup Type</label><br />
                        <div class="form-check form-check-inline">
                            <input class="form-check-input"
                                   type="radio"
                                   name="IsApplicationAware"
                                   value="false"
                                   id="IsApplicationAwareFalse"
                                   checked />
                            <label class="form-check-label" for="IsApplicationAwareFalse">Crash-Consistent</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input"
                                   type="radio"
                                   name="IsApplicationAware"
                                   value="true"
                                   id="appAwareRadio" />
                            <label class="form-check-label" for="appAwareRadio">
                                With Proxmox options
                            </label>
                        </div>

                        <div id="appAwareOptions"
                             class="border rounded p-3 mt-3 bg-light d-none">
                            <label class="form-label">Options</label>
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       name="EnableIoFreeze"
                                       id="EnableIoFreeze"
                                       value="true" />
                                <label class="form-check-label" for="EnableIoFreeze">
                                    Enable IO-Freeze
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       name="UseProxmoxSnapshot"
                                       id="UseProxmoxSnapshot"
                                       value="true" />
                                <label class="form-check-label" for="UseProxmoxSnapshot">
                                    Create Snapshot
                                </label>
                            </div>
                            <div id="proxmoxSnapshotOptions"
                                 class="mt-2 ms-3 d-none">
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           name="WithMemory"
                                           id="WithMemory"
                                           value="true" />
                                    <label class="form-check-label" for="WithMemory">
                                        Include RAM (With Memory)
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- ==================== SnapMirror Label ==================== -->
                    <div class="mb-3">
                        <label for="LabelSelect" class="form-label">Snapmirror Label</label>
                        <select id="LabelSelect" name="Label" class="form-select">
                            <option value="Manual">Manual</option>
                            <option value="hourly">hourly</option>
                            <option value="daily">daily</option>
                            <option value="weekly">weekly</option>
                        </select>
                    </div>

                    <!-- ==================== Retention (max = 256) ==================== -->
                    <div class="mb-3">
                        <label class="form-label">Retention</label>
                        <div class="input-group">
                            <input type="number"
                                   name="RetentionCount"
                                   id="RetentionCount"
                                   class="form-control"
                                   min="1"
                                   max="256"
                                   value="7" />
                            <select name="RetentionUnit"
                                    id="RetentionUnit"
                                    class="form-select">
                                <option value="Hours">Hours</option>
                                <option value="Days" selected>Days</option>
                                <option value="Weeks">Weeks</option>
                            </select>
                        </div>
                        <small class="form-text text-muted">
                            How long to keep this snapshot before cleanup (1–256).
                        </small>
                    </div>

                    <!-- ==================== Enable Locking ==================== -->
                    <input type="hidden" name="EnableLocking" value="false" />
                    <div class="mb-3 form-check d-none" id="lockingCheckbox">
                        <input class="form-check-input"
                               type="checkbox"
                               name="EnableLocking"
                               id="EnableLocking"
                               value="true" />
                        <label class="form-check-label" for="EnableLocking">
                            Enable Locking
                        </label>
                    </div>

                    <!-- ==================== “Locked for:” inputs ==================== -->
                    <div class="mb-3 d-none" id="lockingRetention">
                        <label class="form-label">Locked for:</label>
                        <div class="input-group">
                            <input type="number"
                                   name="LockRetentionCount"
                                   id="LockRetentionCount"
                                   class="form-control"
                                   min="1"
                                   max="30"
                                   value="1" />
                            <select name="LockRetentionUnit"
                                    id="LockRetentionUnit"
                                    class="form-select">
                                <option value="Hours">Hours</option>
                                <option value="Days">Days</option>
                                <option value="Weeks">Weeks</option>
                            </select>
                        </div>
                        <small class="form-text text-muted">
                            Must be strictly less than the standard retention (and ≤ 30).
                        </small>
                    </div>

                    <!-- ==================== Replicate to Secondary ==================== -->
                    <div class="mb-3 form-check d-none" id="replicateCheckbox">
                        <input class="form-check-input"
                               type="checkbox"
                               name="ReplicateToSecondary"
                               id="ReplicateToSecondaryToggle"
                               value="true" />
                        <label class="form-check-label" for="ReplicateToSecondaryToggle">
                            Replicate to Secondary
                        </label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Run Now</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // ----- Collapse label toggle -----
            document.querySelectorAll('.storage-card .collapse').forEach(c => {
                c.addEventListener('shown.bs.collapse', () => {
                    const lbl = c.closest('.storage-card')?.querySelector('.collapse-label');
                    if (lbl) lbl.textContent = 'Hide VMs';
                });
                c.addEventListener('hidden.bs.collapse', () => {
                    const lbl = c.closest('.storage-card')?.querySelector('.collapse-label');
                    if (lbl) lbl.textContent = 'Show VMs';
                });
            });

            // ----- Global VM Search -----
            const searchInput = document.getElementById('vmSearch');
            const clearBtn = document.getElementById('vmSearchClear');

            // Keep original row text for safe highlight resets
            document.querySelectorAll('.vm-row .vm-text').forEach(span => {
                if (!span.dataset.original) span.dataset.original = span.textContent || '';
            });

            function normalize(s) { return (s || '').toString().toLowerCase().trim(); }

            let debounceHandle = null;
            function debounce(fn, ms = 160) {
                if (debounceHandle) clearTimeout(debounceHandle);
                debounceHandle = setTimeout(fn, ms);
            }

            function setCollapse(el, open) {
                if (!el || !window.bootstrap) return;
                const instance = bootstrap.Collapse.getOrCreateInstance(el, { toggle: false });
                open ? instance.show() : instance.hide();
            }

            function highlight(span, term) {
                if (!span) return;
                const raw = span.dataset.original || span.textContent || '';
                if (!term) { span.innerHTML = raw; return; }
                const esc = term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                const rx = new RegExp(`(${esc})`, 'ig');
                span.innerHTML = raw.replace(rx, '<mark>$1</mark>');
            }

            function applySearch() {
                const term = normalize(searchInput?.value);
                const anyTerm = !!term;

                let globalMatches = 0;

                document.querySelectorAll('.storage-card').forEach(card => {
                    const list = card.querySelector('.vm-list');
                    const collapseEl = card.querySelector('.collapse');

                    let matchesHere = 0;

                    if (list) {
                        list.querySelectorAll('.vm-row').forEach(row => {
                            const id = (row.dataset.vmId || '').toString();
                            const name = (row.dataset.vmName || '');
                            const hay = normalize(id + ' ' + name);

                            const isMatch = !anyTerm || hay.includes(term);
                            row.classList.toggle('d-none', !isMatch);

                            const textSpan = row.querySelector('.vm-text');
                            highlight(textSpan, anyTerm ? term : '');

                            if (isMatch) matchesHere++;
                        });
                    }

                    // Update per-storage match badge
                    const badge = card.querySelector('.match-count');
                    if (badge) {
                        badge.textContent = matchesHere.toString();
                        badge.classList.toggle('d-none', matchesHere === 0);
                    }

                    globalMatches += matchesHere;

                    // Expand storages with matches; collapse others when searching
                    if (anyTerm) {
                        setCollapse(collapseEl, matchesHere > 0);
                    } else {
                        // On empty search, collapse by default
                        setCollapse(collapseEl, false);
                    }
                });

                // Optional: visual cue if no matches at all
                if (searchInput) searchInput.classList.toggle('is-invalid', anyTerm && globalMatches === 0);
            }

            if (searchInput) searchInput.addEventListener('input', () => debounce(applySearch));
            if (clearBtn) {
                clearBtn.addEventListener('click', () => {
                    if (searchInput) searchInput.value = '';
                    applySearch();
                    searchInput?.focus();
                });
            }

            // Initialize: all collapsed
            applySearch();

            // ----- Modal JS (null-safe) -----
            const labelSelect = document.getElementById("LabelSelect");
            const replicateBox = document.getElementById("replicateCheckbox");
            const replicateToggle = document.getElementById("ReplicateToSecondaryToggle");
            const backupModal = document.getElementById('backupModal');

            // Locking controls + retention logic
            const lockingCheckboxContainer = document.getElementById("lockingCheckbox");
            const lockingCheckbox = document.getElementById("EnableLocking");
            const lockingRetentionContainer = document.getElementById("lockingRetention");
            const lockCountInput = document.getElementById("LockRetentionCount");
            const lockUnitSelect = document.getElementById("LockRetentionUnit");
            const retentionCountInput = document.getElementById("RetentionCount");
            const retentionUnitSelect = document.getElementById("RetentionUnit");

            function retentionInHours(count, unit) {
                const c = parseInt(count, 10);
                if (isNaN(c) || c < 1) return 0;
                switch (unit) {
                    case "Hours": return c;
                    case "Days": return c * 24;
                    case "Weeks": return c * 168;
                }
                return 0;
            }
            function maxLockCount(totalHours, unit) {
                const mul = unit === "Days" ? 24 : unit === "Weeks" ? 168 : 1;
                let maxCnt = Math.floor((totalHours - 1) / mul);
                return Math.min(Math.max(maxCnt, 0), 30);
            }
            function clampLockInput() {
                if (!retentionCountInput || !retentionUnitSelect || !lockCountInput || !lockUnitSelect) return;
                const totalHours = retentionInHours(retentionCountInput.value, retentionUnitSelect.value);
                const maxCnt = maxLockCount(totalHours, lockUnitSelect.value);
                let val = parseInt(lockCountInput.value, 10);
                if (isNaN(val) || val < 1) lockCountInput.value = 1;
                else if (val > maxCnt) lockCountInput.value = maxCnt > 0 ? maxCnt : 1;
            }
            function recalcLockingOptions() {
                if (!retentionCountInput || !retentionUnitSelect || !lockCountInput || !lockUnitSelect) return;
                const totalHours = retentionInHours(retentionCountInput.value, retentionUnitSelect.value);
                if (totalHours <= 1) {
                    if (lockingCheckbox) lockingCheckbox.checked = false;
                    if (lockingCheckbox) lockingCheckbox.disabled = true;
                    if (lockingRetentionContainer) lockingRetentionContainer.classList.add("d-none");
                    return;
                }
                if (lockingCheckbox) lockingCheckbox.disabled = false;

                let selectedUnit = lockUnitSelect.value;
                let validUnit = false;

                Array.from(lockUnitSelect.options).forEach(opt => {
                    const unit = opt.value;
                    const maxCnt = maxLockCount(totalHours, unit);
                    opt.disabled = maxCnt < 1;
                    if (!opt.disabled && unit === selectedUnit) {
                        validUnit = true;
                        lockCountInput.max = maxCnt;
                        if (+lockCountInput.value > maxCnt) lockCountInput.value = maxCnt || 1;
                        if (+lockCountInput.value < 1 || isNaN(+lockCountInput.value)) lockCountInput.value = 1;
                    }
                });

                if (!validUnit) {
                    const firstEnabled = Array.from(lockUnitSelect.options).find(o => !o.disabled);
                    if (firstEnabled) {
                        lockUnitSelect.value = firstEnabled.value;
                        const maxCnt = maxLockCount(totalHours, firstEnabled.value);
                        lockCountInput.max = maxCnt;
                        const cur = parseInt(lockCountInput.value, 10);
                        lockCountInput.value = isNaN(cur) ? 1 : Math.max(1, Math.min(cur, maxCnt));
                    }
                }
            }

            // Block invalid number keys
            function blockInvalidNumberKeys(evt) {
                if (["e","E","+","-","."].includes(evt.key)) evt.preventDefault();
            }
            retentionCountInput?.addEventListener("keydown", blockInvalidNumberKeys);
            lockCountInput?.addEventListener("keydown", blockInvalidNumberKeys);

            // Replicate visibility
            function updateReplicateVisibility(isReplicable) {
                if (!labelSelect || !replicateBox || !replicateToggle) return;
                const manual = labelSelect.value === "Manual";
                replicateBox.classList.toggle("d-none", !isReplicable || manual);
                if (!isReplicable || manual) replicateToggle.checked = false;
            }

            // Modal open wiring
            if (backupModal){
                backupModal.addEventListener('show.bs.modal', function (event) {
                    const btn = event.relatedTarget;
                    if (!btn) return;

                    const isRep = btn.getAttribute('data-replicable') === 'true';
                    const canLock = btn.getAttribute('data-snapshotlockingenabled') === 'true';

                    // Hidden fields
                    const storageEl = document.getElementById('modalStorageName');
                    const clusterEl = document.getElementById('modalClusterId');
                    const controllerEl = document.getElementById('modalControllerId');

                    if (storageEl) storageEl.value = btn.dataset.storage || '';
                    if (clusterEl) clusterEl.value = btn.dataset.cluster || '';
                    if (controllerEl) controllerEl.value = btn.dataset.controllerid || '';

                    // Label & replicate
                    if (labelSelect) {
                        labelSelect.value = "Manual";
                        updateReplicateVisibility(isRep);
                        labelSelect.onchange = () => updateReplicateVisibility(isRep);
                    }

                    // Locking controls visibility reset
                    if (lockingCheckboxContainer && lockingCheckbox && lockingRetentionContainer){
                        lockingCheckboxContainer.classList.toggle("d-none", !canLock);
                        lockingCheckbox.checked = false;
                        lockingCheckbox.disabled = !canLock;
                        lockingRetentionContainer.classList.add("d-none");
                    }

                    // Default retention
                    if (retentionCountInput) retentionCountInput.value = 7;
                    if (retentionUnitSelect) retentionUnitSelect.value = "Days";
                    if (lockCountInput) lockCountInput.value = 1;
                    if (lockUnitSelect) lockUnitSelect.value = "Hours";
                    recalcLockingOptions();

                    // App-aware options
                    const appAwareOptions = document.getElementById("appAwareOptions");
                    const appAwareTrue = document.getElementById("appAwareRadio");
                    const ioFreeze = document.getElementById("EnableIoFreeze");
                    const pveSnap = document.getElementById("UseProxmoxSnapshot");
                    const snapOpts = document.getElementById("proxmoxSnapshotOptions");

                    // Reset to crash-consistent
                    document.getElementById("IsApplicationAwareFalse")?.click();
                    if (appAwareOptions) appAwareOptions.classList.add("d-none");
                    if (ioFreeze) ioFreeze.checked = false;
                    if (pveSnap) pveSnap.checked = false;
                    if (snapOpts) snapOpts.classList.add("d-none");

                    // Attach once-per-open simple handlers
                    appAwareTrue?.addEventListener("change", () => {
                        appAwareOptions?.classList.toggle("d-none", !appAwareTrue.checked);
                    }, { once: true });

                    ioFreeze?.addEventListener("change", () => {
                        if (ioFreeze.checked && pveSnap) {
                            pveSnap.checked = false;
                            snapOpts?.classList.add("d-none");
                        }
                    }, { once: true });

                    pveSnap?.addEventListener("change", () => {
                        if (!pveSnap) return;
                        snapOpts?.classList.toggle("d-none", !pveSnap.checked);
                        if (pveSnap.checked && ioFreeze) ioFreeze.checked = false;
                    }, { once: true });
                });
            }

            // Recalc locking on inputs
            retentionCountInput?.addEventListener("input", recalcLockingOptions);
            retentionUnitSelect?.addEventListener("change", recalcLockingOptions);
            lockUnitSelect?.addEventListener("change", recalcLockingOptions);
            lockCountInput?.addEventListener("input", clampLockInput);
        });
    </script>
}
