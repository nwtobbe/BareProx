@model List<StorageWithVMsDto>

@if (ViewBag.Warning is string warningMessage)
{
    <div class="alert alert-warning">
        <strong>⚠ Warning:</strong> @warningMessage
    </div>
}

<h2>Proxmox Storage</h2>

@foreach (var storage in Model)
{
    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>@storage.StorageName</strong>
            <button type="button"
                    class="btn btn-sm btn-primary"
                    data-bs-toggle="modal"
                    data-bs-target="#backupModal"
                    data-storage="@storage.StorageName"
                    data-cluster="@storage.ClusterId"
                    data-controllerid="@storage.NetappControllerId"
                    data-replicable="@storage.IsReplicable.ToString().ToLower()"
                    data-snapshotlockingenabled="@(storage.SnapshotLockingEnabled ? "true" : "false")">
                Backup Now
            </button>
        </div>
        <div class="card-body">
            @if (storage.VMs.Any())
            {
                <ul class="list-group">
                    @foreach (var vm in storage.VMs)
                    {
                        <li class="list-group-item">
                            VM ID: @vm.Id – @vm.Name
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">No VMs in this storage.</p>
            }
        </div>
    </div>
}

<!-- ===========================
     MODAL (single, shared)
============================ -->
<div class="modal fade" id="backupModal" tabindex="-1" aria-labelledby="backupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form asp-controller="Backup"
              asp-action="StartBackupNow"
              method="post"
              id="backupNowForm">

            <!-- Hidden fields populated on modal show -->
            <input type="hidden" name="StorageName" id="modalStorageName" />
            <input type="hidden" name="ClusterId" id="modalClusterId" />
            <input type="hidden" name="ControllerId" id="modalControllerId" />
            <input type="hidden" name="ScheduleId" value="999" />

            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="backupModalLabel">Run Backup Now</h5>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <!-- ====================
                         Backup Type
                         ==================== -->
                    <div class="mb-3">
                        <label class="form-label">Backup Type</label><br />
                        <div class="form-check form-check-inline">
                            <input class="form-check-input"
                                   type="radio"
                                   name="IsApplicationAware"
                                   value="false"
                                   checked />
                            <label class="form-check-label">Crash-Consistent</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input"
                                   type="radio"
                                   name="IsApplicationAware"
                                   value="true"
                                   id="appAwareRadio" />
                            <label class="form-check-label" for="appAwareRadio">
                                Application-Aware
                            </label>
                        </div>
                        <div id="appAwareOptions"
                             class="border rounded p-3 mt-3 bg-light d-none">
                            <label class="form-label">App-Aware Options</label>
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       name="EnableIoFreeze"
                                       id="EnableIoFreeze"
                                       value="true" />
                                <label class="form-check-label" for="EnableIoFreeze">
                                    Enable IO-Freeze
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       name="UseProxmoxSnapshot"
                                       id="UseProxmoxSnapshot"
                                       value="true" />
                                <label class="form-check-label" for="UseProxmoxSnapshot">
                                    Create Proxmox Snapshot
                                </label>
                            </div>
                            <div id="proxmoxSnapshotOptions"
                                 class="mt-2 ms-3 d-none">
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           name="WithMemory"
                                           id="WithMemory"
                                           value="true" />
                                    <label class="form-check-label" for="WithMemory">
                                        Include RAM (With Memory)
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- ====================
                         SnapMirror Label
                         ==================== -->
                    <div class="mb-3">
                        <label for="LabelSelect" class="form-label">Snapmirror Label</label>
                        <select id="LabelSelect" name="Label" class="form-select">
                            <option value="Manual">Manual</option>
                            <option value="hourly">hourly</option>
                            <option value="daily">daily</option>
                            <option value="weekly">weekly</option>
                        </select>
                    </div>

                    <!-- ====================
                         Retention (max = 256)
                         ==================== -->
                    <div class="mb-3">
                        <label class="form-label">Retention</label>
                        <div class="input-group">
                            <input type="number"
                                   name="RetentionCount"
                                   id="RetentionCount"
                                   class="form-control"
                                   min="1"
                                   max="256"
                                   value="7" />
                            <select name="RetentionUnit"
                                    id="RetentionUnit"
                                    class="form-select">
                                <option value="Hours">Hours</option>
                                <option value="Days" selected>Days</option>
                                <option value="Weeks">Weeks</option>
                            </select>
                        </div>
                        <small class="form-text text-muted">
                            How long to keep this snapshot before cleanup (1–256).
                        </small>
                    </div>

                    <!-- ====================
                         Enable Locking
                         ==================== -->
                    <!-- hidden fallback so it always posts false -->
                    @* <input type="hidden" name="EnableLocking" value="false" /> *@

                    <div class="mb-3 form-check d-none" id="lockingCheckbox">
                        <input class="form-check-input"
                               type="checkbox"
                               name="EnableLocking"
                               id="EnableLocking"
                               value="true" />
                        <label class="form-check-label" for="EnableLocking">
                            Enable Locking
                        </label>
                    </div>

                    <!-- ====================
                         “Locked for:” inputs
                         ==================== -->
                    <div class="mb-3 d-none" id="lockingRetention">
                        <label class="form-label">Locked for:</label>
                        <div class="input-group">
                            <input type="number"
                                   name="LockRetentionCount"
                                   id="LockRetentionCount"
                                   class="form-control"
                                   min="1"
                                   max="30"
                                   value="1" />
                            <select name="LockRetentionUnit"
                                    id="LockRetentionUnit"
                                    class="form-select">
                                <option value="Hours">Hours</option>
                                <option value="Days">Days</option>
                                <option value="Weeks">Weeks</option>
                            </select>
                        </div>
                        <small class="form-text text-muted">
                            Must be strictly less than the standard retention (and ≤ 30).
                        </small>
                    </div>

                    <!-- ====================
                         Replicate to Secondary
                         ==================== -->
                    <div class="mb-3 form-check d-none" id="replicateCheckbox">
                        <input class="form-check-input"
                               type="checkbox"
                               name="ReplicateToSecondary"
                               id="ReplicateToSecondaryToggle"
                               value="true" />
                        <label class="form-check-label" for="ReplicateToSecondaryToggle">
                            Replicate to Secondary
                        </label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-success">
                        Run Now
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const appAwareRadios = document.querySelectorAll("input[name='IsApplicationAware']");
            const optionsContainer = document.getElementById("appAwareOptions");
            const proxmoxCheckbox = document.getElementById("UseProxmoxSnapshot");
            const proxmoxOptions = document.getElementById("proxmoxSnapshotOptions");
            const freezeCheckbox = document.getElementById("EnableIoFreeze");
            const replicateBox = document.getElementById("replicateCheckbox");
            const replicateToggle = document.getElementById("ReplicateToSecondaryToggle");
            const labelSelect = document.getElementById("LabelSelect");

            const lockingCheckboxContainer = document.getElementById("lockingCheckbox");
            const lockingCheckbox = document.getElementById("EnableLocking");
            const lockingRetentionContainer = document.getElementById("lockingRetention");
            const lockCountInput = document.getElementById("LockRetentionCount");
            const lockUnitSelect = document.getElementById("LockRetentionUnit");
            const retentionCountInput = document.getElementById("RetentionCount");
            const retentionUnitSelect = document.getElementById("RetentionUnit");

            function blockInvalidNumberKeys(evt) {
                if (["e","E","+","-","."].includes(evt.key)) {
                    evt.preventDefault();
                }
            }

            retentionCountInput.addEventListener("keydown", blockInvalidNumberKeys);
            lockCountInput.addEventListener("keydown", blockInvalidNumberKeys);

            function retentionInHours(count, unit) {
                const c = parseInt(count, 10);
                if (isNaN(c) || c < 1) return 0;
                switch (unit) {
                    case "Hours": return c;
                    case "Days":  return c * 24;
                    case "Weeks": return c * 168;
                }
                return 0;
            }

            function updateVisibility() {
                const sel = Array.from(appAwareRadios).find(r => r.checked);
                optionsContainer.classList.toggle("d-none", sel?.value !== "true");
            }

            function updateSnapshotOptions() {
                const useSnap = proxmoxCheckbox.checked;
                proxmoxOptions.classList.toggle("d-none", !useSnap);
                if (useSnap && freezeCheckbox.checked) {
                    freezeCheckbox.checked = false;
                }
            }

            function handleFreezeToggle() {
                if (freezeCheckbox.checked && proxmoxCheckbox.checked) {
                    proxmoxCheckbox.checked = false;
                    proxmoxOptions.classList.add("d-none");
                }
            }

            function updateReplicateVisibility(isReplicable) {
                replicateBox.classList.toggle("d-none", !isReplicable || labelSelect.value === "Manual");
                if (!isReplicable || labelSelect.value === "Manual") {
                    replicateToggle.checked = false;
                }
            }

            function recalcLockingOptions() {
                const totalHours = retentionInHours(
                    retentionCountInput.value,
                    retentionUnitSelect.value
                );

                if (totalHours <= 1) {
                    lockingCheckbox.checked = false;
                    lockingCheckbox.disabled = true;
                    lockingRetentionContainer.classList.add("d-none");
                    return;
                }

                lockingCheckbox.disabled = false;

                Array.from(lockUnitSelect.options).forEach(opt => {
                    const unit = opt.value;
                    const mul = unit === "Days" ? 24 : unit === "Weeks" ? 168 : 1;
                    let maxCnt = Math.floor((totalHours - 1) / mul);
                    maxCnt = Math.min(maxCnt, 30);

                    opt.disabled = maxCnt < 1;
                    if (unit === lockUnitSelect.value) {
                        lockCountInput.max = maxCnt;
                        if (+lockCountInput.value > maxCnt) {
                            lockCountInput.value = maxCnt;
                        }
                    }
                });
            }

            lockingCheckbox.addEventListener("change", () => {
                lockingRetentionContainer.classList.toggle("d-none", !lockingCheckbox.checked);
                if (lockingCheckbox.checked) recalcLockingOptions();
            });

            retentionCountInput.addEventListener("input", recalcLockingOptions);
            retentionUnitSelect.addEventListener("change", recalcLockingOptions);
            lockUnitSelect.addEventListener("change", recalcLockingOptions);

            const backupModal = document.getElementById('backupModal');
            backupModal.addEventListener('show.bs.modal', function (event) {
                const btn = event.relatedTarget;
                const isRep = btn.getAttribute('data-replicable') === 'true';
                const canLock = btn.getAttribute('data-snapshotlockingenabled') === 'true';

                replicateToggle.checked = false;
                updateReplicateVisibility(isRep);

                document.getElementById('modalStorageName').value = btn.dataset.storage;
                document.getElementById('modalClusterId').value = btn.dataset.cluster;
                document.getElementById('modalControllerId').value = btn.dataset.controllerid;

                labelSelect.value = "Manual";
                labelSelect.onchange = () => updateReplicateVisibility(isRep);

                retentionCountInput.value = 7;
                retentionUnitSelect.value = "Days";
                lockCountInput.value = 1;
                lockUnitSelect.value = "Hours";

                lockingCheckboxContainer.classList.toggle("d-none", !canLock);
                lockingCheckbox.checked = false;
                lockingCheckbox.disabled = !canLock;
                lockingRetentionContainer.classList.add("d-none");

                recalcLockingOptions();
            });

            appAwareRadios.forEach(r => r.addEventListener("change", updateVisibility));
            proxmoxCheckbox.addEventListener("change", updateSnapshotOptions);
            freezeCheckbox.addEventListener("change", handleFreezeToggle);

            updateVisibility();
            updateSnapshotOptions();
        });
    </script>
}
