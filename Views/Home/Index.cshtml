@using System.Linq

@{
    // Toggle NetApp blocks when you actually wire them up
    var netappEnabled = false;

    ViewData["Title"] = "System Status";

    var recentJobs = ViewBag.RecentJobs as IEnumerable<dynamic>;
    var proxmoxClusters = (ViewBag.ProxmoxClusters as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>())
                          .OrderBy(c => (string)c.Name) // sort clusters by Name
                          .ToList();

    // Demo placeholders until real data wired
    var primaryNetapps = new List<dynamic> {
        new { Name = "NetApp Primary 1", Status = "Healthy", Alerts = new List<string>() },
        new { Name = "NetApp Primary 2", Status = "Warning", Alerts = new List<string> { "Disk usage 92%" } }
    };

    var secondaryNetapps = new List<dynamic> {
        new { Name = "NetApp Secondary 1", Status = "Healthy", Alerts = new List<string>() },
        new { Name = "NetApp Secondary 2", Status = "Error", Alerts = new List<string> { "Replication failed: SnapMirror", "Sync overdue 1h" } }
    };
}

<div class="container mt-4">
    <h1 class="mb-4">BareProx System Status</h1>

    <!-- Update banner host (Home-only) -->
    <div class="mb-3" id="update-banner-container"></div>

    <!-- Job Status (Last 24h) -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-dark text-white">
            <strong>Job Status (Last 24 hours)</strong>
        </div>
        <div class="card-body">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Started</th>
                        <th>Type</th>
                        <th>VM</th>
                        <th>Status</th>
                        <th>Error</th>
                    </tr>
                </thead>
                <tbody>
                    @if (recentJobs != null && recentJobs.Any())
                    {
                        foreach (var job in recentJobs)
                        {
                            var status = (string)job.Status;
                            var rowClass = status == "Failed" ? "table-danger"
                            : status == "Cancelled" ? "table-warning"
                            : status == "Completed" ? "table-success"
                            : "table-warning";

                            var badgeClass = status == "Failed" ? "bg-danger"
                            : status == "Cancelled" ? "bg-warning text-dark"
                            : status == "Completed" ? "bg-success"
                            : "bg-secondary";

                            <tr class="@rowClass">
                                <td>@(job.StartedAt is DateTime dt ? dt.ToString("yyyy-MM-dd HH:mm") : "")</td>
                                <td>@job.Type</td>
                                <td>@job.RelatedVm</td>
                                <td><span class="badge @badgeClass">@status</span></td>
                                <td class="text-truncate" style="max-width:260px;">@job.ErrorMessage</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-muted text-center">No failed or cancelled jobs in the last 24 hours.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Proxmox Clusters -->
    @foreach (var cluster in proxmoxClusters)
    {
        // Sort this cluster’s hosts by Name
        var hosts = ((IEnumerable<dynamic>)cluster.Hosts)
        .OrderBy(h => (string)h.Name)
        .ToList();

        // Compute cluster badge based on how many are running
        var total = hosts.Count;
        var onlineCount = hosts.Count(h => (string)h.Status == "Running");
        var allOnline = total > 0 && onlineCount == total;
        var anyOnline = onlineCount > 0;
        var badgeClass = allOnline ? "bg-success"
        : anyOnline ? "bg-warning text-dark"
        : "bg-danger";

        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <div>
                    <strong>@cluster.Name</strong>
                    <span class="ms-2 badge @badgeClass">@cluster.Status</span>
                </div>
                <small class="opacity-75">@onlineCount / @total hosts running</small>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var host in hosts)
                    {
                        var isRunning = (string)host.Status == "Running";
                        var hostBadge = isRunning ? "bg-success" : "bg-danger";
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@host.Name</span>
                            <span class="badge @hostBadge">@host.Status</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }

    @if (netappEnabled)
    {
        <!-- Primary NetApp Systems -->
        @foreach (var netapp in primaryNetapps)
        {
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-info text-white">
                    <strong>@netapp.Name</strong>
                    <span class="ms-2 badge bg-@(netapp.Status == "Healthy" ? "success" : netapp.Status == "Warning" ? "warning text-dark" : "danger")">@netapp.Status</span>
                </div>
                <div class="card-body">
                    <div>
                        <strong>System Health Alerts:</strong>
                        <ul class="mb-0">
                            @if (netapp.Alerts.Count == 0)
                            {
                                <li>No alerts.</li>
                            }
                            else
                            {
                                foreach (var alert in netapp.Alerts)
                                {
                                    <li>@alert</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }

        <!-- Secondary NetApp Systems -->
        @foreach (var netapp in secondaryNetapps)
        {
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <strong>@netapp.Name</strong>
                    <span class="ms-2 badge bg-@(netapp.Status == "Healthy" ? "success" : netapp.Status == "Warning" ? "warning text-dark" : "danger")">@netapp.Status</span>
                </div>
                <div class="card-body">
                    <div>
                        <strong>System Health Alerts:</strong>
                        <ul class="mb-0">
                            @if (netapp.Alerts.Count == 0)
                            {
                                <li>No alerts.</li>
                            }
                            else
                            {
                                foreach (var alert in netapp.Alerts)
                                {
                                    <li>@alert</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    }
</div>

@section Scripts {
    <script>
        (async () => {
          try {
            const r = await fetch('/api/updates/status', { cache: 'no-store' });
            if (!r.ok) return;
            const d = await r.json();
            if (!d || !d.isUpdateAvailable) return;

            const commands = [
              "sudo apt-get update",
              "sudo apt-get dist-upgrade -y",
              "docker compose down",
              "docker image prune -f",
              "docker compose pull",
              "docker compose up -d"
            ].join("\n");

            const html = `
        <div class="alert alert-info d-flex align-items-center justify-content-between shadow-sm" role="alert">
          <div>
            <strong>Update available:</strong>
            <span class="badge bg-primary">v${d.latestVersion}</span>
            ${d.latestDate ? `<small class="text-muted ms-2">(${d.latestDate})</small>` : ``}
            <span class="ms-2">You’re on <code>${d.currentVersion}</code>.</span>
          </div>
          <div class="ms-3">
            <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#whatsNewModal">
              What’s new
            </button>
            <button type="button" class="btn btn-sm btn-success ms-2" data-bs-toggle="modal" data-bs-target="#updateInstructionsModal">
              Get update
            </button>
          </div>
        </div>

        <!-- What's New Modal -->
        <div class="modal fade" id="whatsNewModal" tabindex="-1" aria-labelledby="whatsNewLabel" aria-hidden="true">
          <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="whatsNewLabel">What’s new in v${d.latestVersion}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">${d.whatsNewHtml || "<p>No changelog entries found.</p>"}</div>
            </div>
          </div>
        </div>

        <!-- Update Instructions Modal -->
        <div class="modal fade" id="updateInstructionsModal" tabindex="-1" aria-labelledby="updateInstructionsLabel" aria-hidden="true">
          <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="updateInstructionsLabel">Update BareProx (Docker Compose on Debian)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <p class="mb-2">Run these commands on the host where <code>docker-compose.yml</code> lives:</p>
                <pre class="bg-light border rounded p-3 mb-3"><code id="bp-update-commands">${commands.replace(/&/g,"&amp;").replace(/</g,"&lt;")}</code></pre>

                <!-- Add this button so your copy handler works -->
                <button type="button" class="btn btn-outline-secondary btn-sm" id="bp-copy-cmds">Copy commands</button>

                <hr/>
                <ul class="small text-muted mb-0">
                  <li>Run these in the directory containing your <code>docker-compose.yml</code>.</li>
                  <li><code>docker image prune</code> only removes dangling images; remove <code>-f</code> to confirm interactively.</li>
                  <li>If you use legacy <code>docker-compose</code>, replace <code>docker compose</code> with <code>docker-compose</code>.</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        </div>`;

            const host = document.getElementById('update-banner-container');
            if (host) {
              host.innerHTML = html;

              // Copy handler
              const btn = document.getElementById('bp-copy-cmds');
              const codeEl = document.getElementById('bp-update-commands');
              if (btn && codeEl) {
                btn.addEventListener('click', async () => {
                  try {
                    await navigator.clipboard.writeText(codeEl.innerText);
                    btn.textContent = 'Copied!';
                    setTimeout(() => (btn.textContent = 'Copy commands'), 1500);
                  } catch {
                    btn.textContent = 'Copy failed';
                    setTimeout(() => (btn.textContent = 'Copy commands'), 1500);
                  }
                });
              }
            }
          } catch { /* ignore */ }
        })();
    </script>
}
