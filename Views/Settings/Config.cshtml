@model BareProx.Models.SettingsPageViewModel

@if (TempData["RestartRequired"] != null)
{
    <div class="alert alert-warning">
        <strong>Restart required:</strong> The application must restart to apply the new certificate.
        <form asp-action="RestartApp" asp-controller="Settings" method="post" style="display:inline;">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-danger btn-sm ms-3">Restart Now</button>
        </form>
    </div>
}

@{
    ViewBag.Title = "Application Configuration";
    var experimentalEnabled = (bool)(ViewBag.ExperimentalExtra ?? false);
}

<h2>@ViewBag.Title</h2>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}

<!-- ================================
     Section A: Time Zone Form
     ================================ -->
@using (Html.BeginForm("Config", "Settings", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-group mb-3">
        @Html.LabelFor(m => m.Config.TimeZoneWindows)
        @Html.DropDownListFor(
        m => m.Config.TimeZoneWindows,
        Model.TimeZones,
        "— select time zone —",
        new { @class = "form-control" })
    @Html.ValidationMessageFor(
        m => m.Config.TimeZoneWindows,
        "", new { @class = "text-danger" })
</div>

<button type="submit" class="btn btn-primary">Save Time Zone</button>
}

<hr />

<!-- ===========================================
     Section B: Experimental Features Toggle
     =========================================== -->
@using (Html.BeginForm("ToggleExperimental", "Settings", FormMethod.Post, new { @class = "mb-3" }))
{
    @Html.AntiForgeryToken()
    <div class="form-check form-switch">
        <input class="form-check-input"
               type="checkbox"
               id="ExperimentalExtra"
               name="ExperimentalExtra"
               value="true"
               @(experimentalEnabled ? "checked" : "") />
        <label class="form-check-label" for="ExperimentalExtra">
            Enable even more experimental features in this experimental application
        </label>
    </div>
    <button type="submit" class="btn btn-outline-secondary btn-sm mt-2">Save</button>
}

<hr />

<!-- =========================================
     Section C: Email Notifications
     ========================================= -->
<h4>Email Notifications</h4>

@using (Html.BeginForm("SaveEmailSettings", "Settings", FormMethod.Post, new { @class = "mb-3" }))
{
    @Html.AntiForgeryToken()

    <div class="form-check form-switch mb-3" value="false">
        <input class="form-check-input"
               type="checkbox"
               id="Email_Enabled"
               name="Email.Enabled"
               value="true"
               @(Model.Email?.Enabled == true ? "checked" : "") />
        <label class="form-check-label" for="Email_Enabled">
            Enable email notifications
        </label>
    </div>

    <!-- Hidden when not enabled -->
    <div id="email-settings-fields" class="border rounded p-3 bg-light @(Model.Email?.Enabled == true ? "" : "d-none")">
        <div class="row g-3">
            <div class="col-md-6">
                <label for="Email_SmtpHost" class="form-label">SMTP Server</label>
                <input class="form-control" id="Email_SmtpHost" name="Email.SmtpHost" value="@Model.Email?.SmtpHost" />
                @Html.ValidationMessage("Email.SmtpHost", "", new { @class = "text-danger" })
            </div>

            <div class="col-md-3">
                <label for="Email_SmtpPort" class="form-label">Port</label>
                <input type="number" class="form-control" id="Email_SmtpPort" name="Email.SmtpPort" value="@(Model.Email?.SmtpPort ?? 587)" min="1" />
                @Html.ValidationMessage("Email.SmtpPort", "", new { @class = "text-danger" })
            </div>

            <div class="col-md-3">
                <label for="Email_SecurityMode" class="form-label">Security</label>
                <select class="form-select" id="Email_SecurityMode" name="Email.SecurityMode">
                    @{
                        var sec = Model.Email?.SecurityMode ?? "StartTls";
                        string Opt(string val, string text) => $"<option value=\"{val}\" {(sec == val ? "selected" : "")}>{text}</option>";
                    }
                    @Html.Raw(Opt("None", "None"))
                    @Html.Raw(Opt("StartTls", "STARTTLS"))
                    @Html.Raw(Opt("SslTls", "SSL/TLS"))
                </select>
                @Html.ValidationMessage("Email.SecurityMode", "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label for="Email_Username" class="form-label">Username</label>
                <input class="form-control" id="Email_Username" name="Email.Username" value="@Model.Email?.Username" autocomplete="username" />
                @Html.ValidationMessage("Email.Username", "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label for="Email_Password" class="form-label">Password / App Password</label>
                <div class="input-group">
                    <input type="password" class="form-control" id="Email_Password" name="Email.Password" value="" placeholder="••••••••" autocomplete="current-password" />
                    <button class="btn btn-outline-secondary" type="button" id="togglePwd">Show</button>
                </div>
                @Html.ValidationMessage("Email.Password", "", new { @class = "text-danger" })
                <small class="text-muted">Leave blank to keep existing password.</small>
            </div>

            <div class="col-md-6">
                <label for="Email_From" class="form-label">From Address</label>
                <input type="email" class="form-control" id="Email_From" name="Email.From" value="@Model.Email?.From" />
                @Html.ValidationMessage("Email.From", "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label for="Email_DefaultRecipients" class="form-label">Recipients</label>
                <input class="form-control" id="Email_DefaultRecipients" name="Email.DefaultRecipients" value="@Model.Email?.DefaultRecipients" placeholder="tobias@example.com,alerts@example.com" />
                <small class="text-muted">Comma-separated list.</small>
                @Html.ValidationMessage("Email.DefaultRecipients", "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <label class="form-label">Notify for</label>
        <div class="row g-3">
            <div class="col-md-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="Email_OnBackupSuccess" name="Email.OnBackupSuccess" value="true" @(Model.Email?.OnBackupSuccess == true ? "checked" : "") />
                    <label class="form-check-label" for="Email_OnBackupSuccess">Backup success</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="Email_OnBackupFailure" name="Email.OnBackupFailure" value="true" @(Model.Email?.OnBackupFailure == true ? "checked" : "") />
                    <label class="form-check-label" for="Email_OnBackupFailure">Backup failure</label>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="Email_OnRestoreSuccess" name="Email.OnRestoreSuccess" value="true" @(Model.Email?.OnRestoreSuccess == true ? "checked" : "") />
                    <label class="form-check-label" for="Email_OnRestoreSuccess">Restore success</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="Email_OnRestoreFailure" name="Email.OnRestoreFailure" value="true" @(Model.Email?.OnRestoreFailure == true ? "checked" : "") />
                    <label class="form-check-label" for="Email_OnRestoreFailure">Restore failure</label>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="Email_OnWarnings" name="Email.OnWarnings" value="true" @(Model.Email?.OnWarnings == true ? "checked" : "") />
                    <label class="form-check-label" for="Email_OnWarnings">Warnings / System alerts</label>
                </div>

                <div class="row">
                    <div class="col-8">
                        <label for="Email_MinSeverity" class="form-label">Minimum severity to notify</label>
                        <select class="form-select" id="Email_MinSeverity" name="Email.MinSeverity">
                            @{
                                var sev = Model.Email?.MinSeverity ?? "Info";
                                string SOpt(string v) => $"<option value=\"{v}\" {(sev == v ? "selected" : "")}>{v}</option>";
                            }
                            @Html.Raw(SOpt("Info"))
                            @Html.Raw(SOpt("Warning"))
                            @Html.Raw(SOpt("Error"))
                            @Html.Raw(SOpt("Critical"))
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Save Email Settings</button>
}

@using (Html.BeginForm("SendTestEmail", "Settings", FormMethod.Post, new { @class = "mt-2" }))
{
    @Html.AntiForgeryToken()
    <!-- Hidden when not enabled -->
    <div id="email-test" class="@(Model.Email?.Enabled == true ? "" : "d-none")">
        <div class="input-group" style="max-width: 520px;">
            <input type="email" class="form-control" name="to" placeholder="Send test email to…" />
            <button type="submit" class="btn btn-outline-primary">Send Test Email</button>
        </div>
        <small class="text-muted">Uses the saved SMTP settings above.</small>
    </div>
}

<hr />

<!-- ========================================
     Section D: Current Certificate (moved)
     ======================================== -->
@if (!string.IsNullOrWhiteSpace(Model.Regenerate.CurrentSubject))
{
    <h4>Current Self-Signed Certificate</h4>
    <dl class="row">
        <dt class="col-sm-3">Subject</dt>
        <dd class="col-sm-9">@Model.Regenerate.CurrentSubject</dd>

        <dt class="col-sm-3">Valid From</dt>
        <dd class="col-sm-9">@Model.Regenerate.CurrentNotBefore?.ToString("u")</dd>

        <dt class="col-sm-3">Valid Until</dt>
        <dd class="col-sm-9">@Model.Regenerate.CurrentNotAfter?.ToString("u")</dd>

        <dt class="col-sm-3">Thumbprint</dt>
        <dd class="col-sm-9">@Model.Regenerate.CurrentThumbprint</dd>
    </dl>
}
else
{
    <div class="alert alert-warning">
        No certificate is currently loaded.
    </div>
}

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        (function () {
            const enabled   = document.getElementById('Email_Enabled');
            const box       = document.getElementById('email-settings-fields');
            const testRow   = document.getElementById('email-test');
            const togglePwd = document.getElementById('togglePwd');
            const pwd       = document.getElementById('Email_Password');

            function setDisabled(container, off) {
                if (!container) return;
                container.querySelectorAll('input, select, button, textarea').forEach(el => {
                    if (el.id === 'Email_Enabled') return;
                    el.disabled = off;
                });
            }

            function updateState() {
                const on = enabled?.checked ?? false;

                if (on) {
                    box?.classList.remove('d-none');
                    testRow?.classList.remove('d-none');
                    setDisabled(box, false);
                } else {
                    setDisabled(box, true);
                    box?.classList.add('d-none');
                    testRow?.classList.add('d-none');
                }
            }

            enabled?.addEventListener('change', updateState);
            updateState();

            if (togglePwd && pwd) {
                togglePwd.addEventListener('click', function () {
                    const isPwd = pwd.type === 'password';
                    pwd.type = isPwd ? 'text' : 'password';
                    this.textContent = isPwd ? 'Hide' : 'Show';
                });
            }
        })();
    </script>
}

<!-- ===========================================
     Section E: Regenerate Certificate Form
     =========================================== -->
<h4>Regenerate Self-Signed Certificate</h4>
@using (Html.BeginForm("RegenerateCert", "Settings", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-group mb-3">
        <label for="Regenerate.RegenSubjectName">Common Name (CN)</label>
        <input name="Regenerate.RegenSubjectName" class="form-control" value="@Model.Regenerate.RegenSubjectName" />
        @Html.ValidationMessage("Regenerate.RegenSubjectName", "", new { @class = "text-danger" })
    </div>

    <div class="form-group mb-3">
        <label for="Regenerate.RegenValidDays">Validity (days)</label>
        <input type="number" min="1" name="Regenerate.RegenValidDays" class="form-control" value="@Model.Regenerate.RegenValidDays" />
        @Html.ValidationMessage("Regenerate.RegenValidDays", "", new { @class = "text-danger" })
    </div>

    <div class="form-group mb-3">
        <label for="Regenerate.RegenSANs">Subject Alternative Names (SAN)</label>
        <input name="Regenerate.RegenSANs" class="form-control" placeholder="e.g. localhost,example.com" value="@Model.Regenerate.RegenSANs" />
        @Html.ValidationMessage("Regenerate.RegenSANs", "", new { @class = "text-danger" })
    </div>

    <button type="submit" class="btn btn-warning">Regenerate Certificate</button>
}
