@model List<BareProx.Models.NetappControllerTreeDto>

<h2>Proxmox Volumes with Snapshots</h2>

<input type="text" id="searchBox" class="form-control mb-3" placeholder="Search volumes or snapshots..." />

<form method="get" asp-action="Snapshots" class="mb-3">
    <label for="clusterSelect"><strong>Select Proxmox Cluster:</strong></label>
    <select id="clusterSelect" name="clusterId" class="form-select d-inline w-auto ms-2" onchange="this.form.submit()">
        @foreach (var c in (IEnumerable<BareProx.Models.ProxmoxCluster>)ViewBag.Clusters)
        {
            <option value="@c.Id" selected="@(c.Id == (int)ViewBag.SelectedClusterId ? "selected" : null)">
                @c.Name
            </option>
        }
    </select>
</form>

<div id="volumeTree">
    @for (int controllerIdx = 0; controllerIdx < Model.Count; controllerIdx++)
    {
        var controller = Model[controllerIdx];
        <div class="card mb-3 volume-card">
            <div class="card-header bg-dark text-white">
                <strong>@controller.ControllerName</strong>
                @if (!controller.IsPrimary)
                {
                    <span class="badge bg-warning text-dark ms-2">Secondary</span>
                }
            </div>
            <div class="card-body">
                @for (int svmIdx = 0; svmIdx < controller.Svms.Count; svmIdx++)
                {
                    var svm = controller.Svms[svmIdx];
                    <div class="mb-2">
                        <h6>@svm.Name</h6>
                        @for (int volIdx = 0; volIdx < svm.Volumes.Count; volIdx++)
                        {
                            var volume = svm.Volumes[volIdx];
                            var collapseId = $"snapshots_{controllerIdx}_{svmIdx}_{volIdx}";
                            <div class="card mb-1 ms-3 volume-card">
                                <div class="card-header p-2">
                                    <button class="btn btn-sm btn-link text-start w-100" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId">
                                        📦 @volume.VolumeName
                                    </button>
                                </div>
                                <div id="@collapseId" class="collapse">
                                    <div class="card-body p-2">
                                        @if (volume.Snapshots?.Any() == true)
                                        {
                                            <ul class="list-group snapshot-list">
                                                @foreach (var snap in volume.Snapshots)
                                                {
                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                        @snap
                                                        <button type="button"
                                                                class="btn btn-sm btn-outline-primary"
                                                                data-bs-toggle="modal"
                                                                data-bs-target="#mountModal"
                                                                data-volume="@volume.VolumeName"
                                                                data-vserver="@volume.Vserver"
                                                                data-snapshot="@snap"
                                                                data-controller-id="@controller.ControllerId"
                                                                data-is-primary="@(controller.IsPrimary ? "true" : "false")">
                                                            Mount
                                                        </button>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <p class="text-muted ms-2">No snapshots found.</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Mount Snapshot Modal -->
<div class="modal fade" id="mountModal" tabindex="-1" aria-labelledby="mountModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form asp-controller="Wafl" asp-action="MountSnapshot" method="post">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mountModalLabel">Mount Snapshot</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="VolumeName" id="modalVolumeName" />
                    <input type="hidden" name="Vserver" id="modalVserver" />
                    <input type="hidden" name="SnapshotName" id="modalSnapshotName" />
                    <input type="hidden" name="ControllerId" id="modalControllerId" />
                    <input type="hidden" name="IsSecondary" id="modalIsSecondary" />

                    <!--
                    <div id="secondaryWarning" class="alert alert-warning" style="display: none;">
                        <strong>Warning:</strong> You are mounting from a secondary NetApp controller. Please verify that SnapMirror is up-to-date.
                    </div>
                    -->

                    <div class="mb-3">
                        <label for="modalMountIp" class="form-label">Select Mount IP</label>
                        <select name="MountIp" id="modalMountIp" class="form-select" required>
                            <option disabled selected value="">Loading...</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Mount</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    <script>
        // Search/filter volumes and snapshots live
        document.getElementById("searchBox").addEventListener("input", function () {
            const query = this.value.toLowerCase();
            const cards = document.querySelectorAll(".volume-card");

            cards.forEach(card => {
                const header = card.querySelector(".card-header").innerText.toLowerCase();
                const snapshots = [...card.querySelectorAll(".snapshot-list li")].map(li => li.innerText.toLowerCase());

                card.style.display = (header.includes(query) || snapshots.some(s => s.includes(query))) ? "" : "none";
            });
        });

        // When the Mount modal opens, fill its fields and load IPs
        document.getElementById('mountModal').addEventListener('show.bs.modal', async function (event) {
            const button = event.relatedTarget;
            const volume = button.getAttribute('data-volume');
            const vserver = button.getAttribute('data-vserver');
            const snapshot = button.getAttribute('data-snapshot');
            const controllerId = button.getAttribute('data-controller-id');
            const isPrimary = button.getAttribute('data-is-primary') === "true";

            // Fill hidden modal fields
            document.getElementById('modalVolumeName').value   = volume;
            document.getElementById('modalVserver').value      = vserver;
            document.getElementById('modalSnapshotName').value = snapshot;
            document.getElementById('modalControllerId').value = controllerId;
            document.getElementById('modalIsSecondary').value = isPrimary ? "false" : "true";

            // Optionally show/hide secondary warning
            const warningEl = document.getElementById('secondaryWarning');
            if (warningEl)
                warningEl.style.display = isPrimary ? 'none' : '';

            // Load NFS IPs for this controller/vserver
            const mountIpSelect = document.getElementById('modalMountIp');
            mountIpSelect.innerHTML = '<option disabled selected value="">Loading...</option>';

            try {
                const url = `/Wafl/GetNfsIps?vserver=${encodeURIComponent(vserver)}&controllerId=${encodeURIComponent(controllerId)}`;
                const response = await fetch(url);
                const data = await response.json();
                mountIpSelect.innerHTML = '';

                if (!data.ips || data.ips.length === 0) {
                    mountIpSelect.innerHTML = '<option disabled>No mount IPs available</option>';
                } else {
                    data.ips.forEach(ip => {
                        const option = document.createElement('option');
                        option.value = ip;
                        option.text = ip;
                        mountIpSelect.appendChild(option);
                    });
                }
            } catch {
                mountIpSelect.innerHTML = '<option disabled>Error loading IPs</option>';
            }
        });
    </script>
}
