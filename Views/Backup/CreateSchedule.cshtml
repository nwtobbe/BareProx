@model CreateScheduleRequest
@using System.Text.Json

@{
    ViewData["Title"] = "Create Backup Schedule";
}

<div class="mb-3 d-flex justify-content-between align-items-center">
    <h4 class="mb-0">Create Backup Schedule</h4>
    <a asp-action="Backup" asp-controller="Backup" class="btn btn-secondary">← Back to Schedules</a>
</div>

<form asp-action="CreateSchedule"
      method="post"
      class="needs-validation"
      novalidate="novalidate">

    <!-- Name -->
    <div class="mb-3">
        <label asp-for="Name" class="form-label">Backup Schedule Name</label>
        <input asp-for="Name"
               class="form-control"
               maxlength="20"
               pattern="^[A-Za-z0-9_\-]+$"
               title="Only letters, numbers, hyphens and underscores (max 20 chars)."
               oninput="validateScheduleName(this)"
               required />
        <div class="invalid-feedback">
            Only letters, numbers, hyphens and underscores are allowed (max 20 characters).
        </div>
    </div>

    <!-- Enabled -->
    <div class="mb-3 form-check">
        <input class="form-check-input" asp-for="IsEnabled" />
        <label class="form-check-label" asp-for="IsEnabled">Schedule Enabled</label>
    </div>

    <!-- Storage -->
    <div class="mb-3">
        <label class="form-label">Storage</label>
        <select asp-for="StorageName"
                class="form-select"
                asp-items="Model.StorageOptions"
                required>
            <option value="">-- Select Storage --</option>
        </select>
        <div class="invalid-feedback">Please select a storage.</div>
    </div>
    <input type="hidden" asp-for="ClusterId" id="ClusterId" />
    <input type="hidden" asp-for="ControllerId" id="ControllerId" />

    <!-- Backup Type -->
    <div class="mb-3">
        <label class="form-label">Backup Type</label><br />
        <div class="form-check form-check-inline">
            <input asp-for="IsApplicationAware"
                   class="form-check-input"
                   type="radio"
                   id="ccRadio"
                   value="false"
                   checked />
            <label class="form-check-label" for="ccRadio">Crash-Consistent</label>
        </div>
        <div class="form-check form-check-inline">
            <input asp-for="IsApplicationAware"
                   class="form-check-input"
                   type="radio"
                   id="aaRadio"
                   value="true" />
            <label class="form-check-label" for="aaRadio">Application-Aware</label>
        </div>
    </div>

    <!-- App-Aware Options -->
    <div id="appAwareOptions" class="border rounded p-3 bg-light d-none">
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   asp-for="EnableIoFreeze"
                   id="EnableIoFreeze" />
            <label class="form-check-label" for="EnableIoFreeze">Enable IO-Freeze</label>
        </div>
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   asp-for="UseProxmoxSnapshot"
                   id="UseProxmoxSnapshot" />
            <label class="form-check-label" for="UseProxmoxSnapshot">Create Proxmox Snapshot</label>
        </div>
        <div id="appAwareError" class="text-danger mt-2" style="display:none;">
            You must choose either IO-Freeze OR Proxmox Snapshot.
        </div>
        <div id="proxmoxSnapshotOptions" class="mt-2 ms-3 d-none">
            <div class="form-check">
                <input class="form-check-input"
                       type="checkbox"
                       asp-for="WithMemory"
                       id="WithMemory" />
                <label class="form-check-label" for="WithMemory">Include RAM (With Memory)</label>
            </div>
        </div>
    </div>

    <hr />

    <!-- Schedule Type -->
    <div class="mb-3">
        <label class="form-label">Schedule Type</label>
        <select asp-for="SingleSchedule.Type"
                id="scheduleTypeSelect"
                class="form-select"
                required>
            <option value="">-- Select Type --</option>
            <option value="Hourly">Hourly</option>
            <option value="Daily">Daily</option>
            <option value="Weekly">Weekly</option>
        </select>
        <div class="invalid-feedback">Please select a schedule type.</div>
    </div>

    <!-- Dynamic schedule fields -->
    <div id="single-schedule-fields"></div>
    <input type="hidden" asp-for="SingleSchedule.Label" id="snapmirrorLabel" />

    <!-- Retention -->
    <div class="mb-3">
        <label class="form-label">Retention</label>
        <div class="input-group">
            <select asp-for="SingleSchedule.RetentionUnit"
                    class="form-select"
                    required>
                <option value="Hours">Hours</option>
                <option value="Days">Days</option>
                <option value="Weeks">Weeks</option>
            </select>
            <input name="SingleSchedule.RetentionCount"
                   type="number"
                   min="1" max="256"
                   class="form-control"
                   id="RetentionCount"
                   required />
            <div class="invalid-feedback">
                Enter a number between 1 and 256.
            </div>
        </div>
    </div>

    <input type="hidden"
           id="replicableVolumes"
           value="@string.Join(',', Model.ReplicableVolumes ?? new HashSet<string>())" />

    <!-- Replicate to Secondary -->
    <div class="mb-3 form-check d-none" id="replicateCheckbox">
        <input class="form-check-input"
               asp-for="ReplicateToSecondary"
               id="ReplicateToSecondary" />
        <label class="form-check-label" asp-for="ReplicateToSecondary">Replicate to Secondary</label>
    </div>

    <!-- Exclude VMs -->
    <div class="mb-3">
        <label asp-for="ExcludedVmIds" class="form-label">Exclude VMs</label>
        <select asp-for="ExcludedVmIds"
                class="form-select"
                asp-items="Model.AllVms"
                multiple></select>
    </div>

    <div class="mb-3 text-end">
        <button type="submit" class="btn btn-success">Create Schedule</button>
        <a asp-action="Backup" asp-controller="Backup" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          // --- helpers ---
          function validateScheduleName(input) {
            input.value = input.value
                          .replace(/[^a-zA-Z0-9_\-]/g, '')
                          .slice(0, 20);
          }
          function clampInput(el) {
            const min = +el.min, max = +el.max;
            el.addEventListener('input', () => {
              let v = parseInt(el.value,10);
              if (isNaN(v)) return;
              if (v < min) el.value = min;
              if (v > max) el.value = max;
            });
          }

          // --- initial state & model ---
          const selectType  = document.getElementById('scheduleTypeSelect');
          const ccRadio     = document.getElementById('ccRadio');
          const aaRadio     = document.getElementById('aaRadio');
          const appOpts     = document.getElementById('appAwareOptions');
          const ioFreezeCb  = document.getElementById('EnableIoFreeze');
          const proxSnapCb  = document.getElementById('UseProxmoxSnapshot');
          const appErr      = document.getElementById('appAwareError');
          const proxOpts    = document.getElementById('proxmoxSnapshotOptions');
          const retention   = document.getElementById('RetentionCount');
          const replicateBox= document.getElementById('replicateCheckbox');
          const replicable  = (document.getElementById('replicableVolumes').value||'').split(',');
          const storageSel  = document.querySelector('select[name="StorageName"]');
          const snapLabel   = document.getElementById('snapmirrorLabel');

          // dynamic fields renderer
          function renderFields(type) {
            const c = document.getElementById('single-schedule-fields');
            let html = '';
            if (type==='Hourly') {
              html += `
                <div class="mb-3">
                  <label>Start Hour</label>
                  <input type="number" min="0" max="23" step="1"
                         name="SingleSchedule.StartHour"
                         class="form-control" required />
                  <div class="invalid-feedback">Required</div>
                </div>
                <div class="mb-3">
                  <label>End Hour</label>
                  <input type="number" min="0" max="23" step="1"
                         name="SingleSchedule.EndHour"
                         class="form-control" required />
                  <div class="invalid-feedback">Required</div>
                </div>`;
            } else {
              html += `<div class="mb-3"><label>Days</label><div>`;
              ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'].forEach(d => {
                html += `<label class="me-2">
                           <input type="checkbox"
                                  name="SingleSchedule.DaysOfWeek"
                                  value="${d}" /> ${d}
                         </label>`;
              });
              html += `</div><div class="invalid-feedback d-block">Select at least one day.</div></div>
                <div class="mb-3">
                  <label>Time</label>
                  <input type="time" name="SingleSchedule.Time" class="form-control" required />
                  <div class="invalid-feedback">Required</div>
                </div>`;
            }
            c.innerHTML = html;
            snapLabel.value = type.toLowerCase();
            c.querySelectorAll('input[type=number]').forEach(clampInput);
          }

          // toggle app-aware panel
          function toggleAppAware() {
            const aa = aaRadio.checked;
            appOpts.classList.toggle('d-none', !aa);
            if (!aa) {
              ioFreezeCb.checked = proxSnapCb.checked = false;
              proxOpts.classList.add('d-none');
              appErr.style.display = 'none';
            }
          }

          // block non-digit chars in retention
          retention.addEventListener('keydown', e => {
            if (['e','E','+','-','.'].includes(e.key)) e.preventDefault();
          });

          // wire up events
          selectType.addEventListener('change', e => renderFields(e.target.value));
          ccRadio.addEventListener('change', toggleAppAware);
          aaRadio.addEventListener('change', toggleAppAware);

          ioFreezeCb.addEventListener('change', () => {
            if (ioFreezeCb.checked) {
              proxSnapCb.checked = false;
              proxOpts.classList.add('d-none');
            }
          });
          proxSnapCb.addEventListener('change', () => {
            if (proxSnapCb.checked) {
              ioFreezeCb.checked = false;
              proxOpts.classList.remove('d-none');
            } else {
              proxOpts.classList.add('d-none');
            }
          });

          storageSel.addEventListener('change', () => {
            if (replicable.includes(storageSel.value)) {
              replicateBox.classList.remove('d-none');
            } else {
              replicateBox.classList.add('d-none');
              replicateBox.querySelector('input').checked = false;
            }
          });
          storageSel.dispatchEvent(new Event('change'));

          // clamp retention on input
          clampInput(retention);

          // form validation
          document.querySelector('form.needs-validation')
            .addEventListener('submit', e => {
              if (!e.target.checkValidity()) {
                e.preventDefault(); e.stopPropagation();
              }
              if (aaRadio.checked && !ioFreezeCb.checked && !proxSnapCb.checked) {
                appErr.style.display = 'block';
                e.preventDefault(); e.stopPropagation();
              }
              e.target.classList.add('was-validated');
            });

          // sanitize name input
          document.querySelector('input[asp-for="Name"]')
            .addEventListener('input', e => validateScheduleName(e.target));

          // initial render of dynamic fields
          if (selectType.value) renderFields(selectType.value);

          // secret: wire cluster/controller via volumeMeta
          const volumeMeta = @Html.Raw(JsonSerializer.Serialize(Model.VolumeMeta));
          storageSel.addEventListener('change', () => {
            const meta = volumeMeta[storageSel.value];
            document.getElementById('ClusterId').value    = meta?.ClusterId ?? '';
            document.getElementById('ControllerId').value = meta?.ControllerId ?? '';
          });
        });
    </script>
}
