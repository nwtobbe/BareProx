@model CreateScheduleRequest
@using System.Text.Json

@{
    ViewData["Title"] = "Create Backup Schedule";

    // Prepare slim JSON for client (value/text/selected) keyed by storage name
    var vmsByStorageSlim = (Model.VmsByStorage ?? new Dictionary<string, List<SelectListItem>>())
        .ToDictionary(
            kv => kv.Key,
            kv => kv.Value.Select(v => new { value = v.Value, text = v.Text, selected = v.Selected }).ToList()
        );
    var preselectedExcluded = Model.ExcludedVmIds ?? new List<string>();
}

<div class="mb-3 d-flex justify-content-between align-items-center">
    <h4 class="mb-0">Create Backup Schedule</h4>
    <a asp-action="Backup" asp-controller="Backup" class="btn btn-secondary">← Back to Schedules</a>
</div>

<form asp-action="CreateSchedule"
      method="post"
      class="needs-validation"
      novalidate="novalidate">

    <!-- Name -->
    <div class="mb-3">
        <label asp-for="Name" class="form-label">Backup Schedule Name</label>
        <input asp-for="Name"
               class="form-control"
               maxlength="20"
               pattern="^[A-Za-z0-9_\-]+$"
               title="Only letters, numbers, hyphens and underscores (max 20 chars)."
               oninput="validateScheduleName(this)"
               required />
        <div class="invalid-feedback">
            Only letters, numbers, hyphens and underscores are allowed (max 20 characters).
        </div>
    </div>

    <!-- Enabled -->
    <div class="mb-3 form-check">
        <input class="form-check-input" asp-for="IsEnabled" />
        <label class="form-check-label" asp-for="IsEnabled">Schedule Enabled</label>
    </div>

    <!-- Storage -->
    <div class="mb-3">
        <label class="form-label">Storage</label>
        <select asp-for="StorageName"
                class="form-select"
                asp-items="Model.StorageOptions"
                required>
            <option value="">-- Select Storage --</option>
        </select>
        <div class="invalid-feedback">Please select a storage.</div>
    </div>
    <input type="hidden" asp-for="ClusterId" id="ClusterId" />
    <input type="hidden" asp-for="ControllerId" id="ControllerId" />

    <!-- Backup Type -->
    <div class="mb-3">
        <label class="form-label">Backup Type</label><br />
        <div class="form-check form-check-inline">
            <input asp-for="IsApplicationAware"
                   class="form-check-input"
                   type="radio"
                   id="ccRadio"
                   value="false"
                   checked />
            <label class="form-check-label" for="ccRadio">Crash-Consistent</label>
        </div>
        <div class="form-check form-check-inline">
            <input asp-for="IsApplicationAware"
                   class="form-check-input"
                   type="radio"
                   id="aaRadio"
                   value="true" />
            <label class="form-check-label" for="aaRadio">With Proxmox options</label>
        </div>
    </div>

    <!-- App-Aware Options -->
    <div id="appAwareOptions" class="border rounded p-3 bg-light d-none">
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   asp-for="EnableIoFreeze"
                   id="EnableIoFreeze" />
            <label class="form-check-label" for="EnableIoFreeze">Enable IO-Freeze</label>
        </div>
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   asp-for="UseProxmoxSnapshot"
                   id="UseProxmoxSnapshot" />
            <label class="form-check-label" for="UseProxmoxSnapshot">Create Proxmox Snapshot</label>
        </div>
        <div id="appAwareError" class="text-danger mt-2" style="display:none;">
            You must choose either IO-Freeze OR Proxmox Snapshot.
        </div>
        <div id="proxmoxSnapshotOptions" class="mt-2 ms-3 d-none">
            <div class="form-check">
                <input class="form-check-input"
                       type="checkbox"
                       asp-for="WithMemory"
                       id="WithMemory" />
                <label class="form-check-label" for="WithMemory">Include RAM (With Memory)</label>
            </div>
        </div>
    </div>

    <hr />

    <!-- Schedule Type -->
    <div class="mb-3">
        <label class="form-label">Schedule Type</label>
        <select asp-for="SingleSchedule.Type"
                id="scheduleTypeSelect"
                class="form-select"
                required>
            <option value="">-- Select Type --</option>
            <option value="Hourly">Hourly</option>
            <option value="Daily">Daily</option>
            <option value="Weekly">Weekly</option>
        </select>
        <div class="invalid-feedback">Please select a schedule type.</div>
    </div>

    <!-- Dynamic schedule fields -->
    <div id="single-schedule-fields"></div>
    <input type="hidden" asp-for="SingleSchedule.Label" id="snapmirrorLabel" />

    <!-- Retention -->
    <div class="mb-3">
        <label class="form-label">Retention</label>
        <div class="input-group">
            <select asp-for="SingleSchedule.RetentionUnit"
                    class="form-select"
                    required>
                <option value="Hours">Hours</option>
                <option value="Days">Days</option>
                <option value="Weeks">Weeks</option>
            </select>
            <input name="SingleSchedule.RetentionCount"
                   type="number"
                   min="1" max="256"
                   class="form-control"
                   id="RetentionCount"
                   required />
            <div class="invalid-feedback">
                Enter a number between 1 and 256.
            </div>
        </div>
    </div>

    <!-- Locking -->
    <div class="mb-3 form-check d-none" id="lockingCheckbox">
        <input class="form-check-input"
               type="checkbox"
               asp-for="EnableLocking"
               id="EnableLocking" value="true" />
        <label class="form-check-label" for="EnableLocking">
            Enable Locking
        </label>
    </div>

    <!-- “Locked for” inputs -->
    <div class="mb-3 d-none" id="lockingRetention">
        <label class="form-label">Locked for:</label>
        <div class="input-group">
            <input type="number"
                   class="form-control"
                   asp-for="LockRetentionCount"
                   id="LockRetentionCount"
                   min="1" max="30"
                   value="1" />
            <select class="form-select"
                    asp-for="LockRetentionUnit"
                    id="LockRetentionUnit">
                <option value="Hours">Hours</option>
                <option value="Days">Days</option>
                <option value="Weeks">Weeks</option>
            </select>
        </div>
        <small class="form-text text-muted">
            Must be strictly less than the standard retention (and ≤ 30).
        </small>
    </div>

    <input type="hidden"
           id="replicableVolumes"
           value="@string.Join(',', Model.ReplicableVolumes ?? new HashSet<string>())" />

    <!-- Replicate to Secondary -->
    <div class="mb-3 form-check d-none" id="replicateCheckbox">
        <input class="form-check-input"
               asp-for="ReplicateToSecondary"
               id="ReplicateToSecondary" />
        <label class="form-check-label" asp-for="ReplicateToSecondary">Replicate to Secondary</label>
    </div>

    <!-- Exclude VMs (by selected Storage) -->
    <div id="excludeBlock" class="mb-3 d-none" aria-hidden="true">
        <label class="form-label">Exclude VMs</label>

        <div class="d-flex flex-wrap gap-2 mb-2">
            <input type="text" id="exclFilter" class="form-control" placeholder="Filter VMs…" style="max-width: 260px;">
            <div class="btn-group" role="group" aria-label="bulk exclude actions">
                <button type="button" class="btn btn-outline-secondary btn-sm" id="exclAll">Select all</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" id="exclNone">None</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" id="exclInvert">Invert</button>
            </div>
            <span class="ms-auto small text-muted" id="exclCount"></span>
        </div>

        <div id="excludeList" class="border rounded p-2" style="max-height: 280px; overflow:auto;"></div>

        <div class="form-text">
            Checked VMs will be <strong>skipped</strong> from Proxmox options. The list reflects the selected storage.
        </div>
    </div>

    <div class="mb-3 text-end">
        <button type="submit" class="btn btn-success">Create Schedule</button>
        <a asp-action="Backup" asp-controller="Backup" class="btn btn-secondary">Cancel</a>
    </div>
</form>

<script>
    const volumeMeta = @Html.Raw(JsonSerializer.Serialize(Model.VolumeMeta));
    const VMS_BY_STORAGE = @Html.Raw(JsonSerializer.Serialize(vmsByStorageSlim));
    const PRESELECTED_EXCLUDES = @Html.Raw(JsonSerializer.Serialize(preselectedExcluded));
</script>

@section Scripts {
    <script>
        function validateScheduleName(input){
          input.value = input.value.replace(/[^A-Za-z0-9_\-]/g,'').slice(0,input.maxLength||20);
        }

        document.addEventListener('DOMContentLoaded', function(){
          const form = document.querySelector('form.needs-validation');

          // Core inputs
          const nameInput = form?.querySelector('input[asp-for="Name"]');
          const retentionEl = document.getElementById('RetentionCount');
          const selectType  = document.getElementById('scheduleTypeSelect');
          const storageSel  = form?.querySelector('select[name="StorageName"]');
          const snapLabel   = document.getElementById('snapmirrorLabel');

          // App-aware + snapshot
          const ccRadio = document.getElementById('ccRadio');
          const aaRadio = document.getElementById('aaRadio');
          const appOpts = document.getElementById('appAwareOptions');
          const ioFreezeCb = document.getElementById('EnableIoFreeze');
          const proxSnapCb = document.getElementById('UseProxmoxSnapshot');
          const appErr = document.getElementById('appAwareError');
          const proxOpts = document.getElementById('proxmoxSnapshotOptions');
          const withMem  = document.getElementById('WithMemory');

          // Exclude VMs block
          const excludeBlock = document.getElementById('excludeBlock');
          const excludeList  = document.getElementById('excludeList');
          const exclFilter   = document.getElementById('exclFilter');
          const exclCount    = document.getElementById('exclCount');

          // Locking
          const lockingCheckboxContainer  = document.getElementById("lockingCheckbox");
          const lockingCheckbox           = document.getElementById("EnableLocking");
          const lockingRetentionContainer = document.getElementById("lockingRetention");
          const lockCountInput            = document.getElementById("LockRetentionCount");
          const lockUnitSelect            = document.getElementById("LockRetentionUnit");

          // Replication
          const replicateBox= document.getElementById('replicateCheckbox');
          const replicable = (document.getElementById('replicableVolumes')?.value.split(',')||[]).filter(Boolean);

          // Helpers
          const qsa = (sel,root=document)=>Array.from(root.querySelectorAll(sel));
          const norm = s => (s??'').toString().trim().toLowerCase();
          const VMS_KEYS = Object.fromEntries(Object.entries(VMS_BY_STORAGE||{}).map(([k,v])=>[norm(k), v]));

          // Name UX
          if (nameInput){
            nameInput.addEventListener('keypress', e => { if (!/^[A-Za-z0-9_-]$/.test(e.key)) e.preventDefault(); });
            nameInput.addEventListener('paste', function(e){
              e.preventDefault();
              const text = (e.clipboardData || window.clipboardData).getData('text/plain')
                            .replace(/[^A-Za-z0-9_-]/g, '').slice(0, this.maxLength || 20);
              document.execCommand('insertText', false, text);
            });
            nameInput.addEventListener('input', function(){ validateScheduleName(this); });
          }

          // Numeric clamp
          function blockNonNumeric(e){ if (/[eE+\-.]/.test(e.key)) e.preventDefault(); }
          function clampInput(el){
            if (!el) return;
            el.addEventListener('keydown', blockNonNumeric);
            el.addEventListener('input', function(){
              const min = parseInt(el.min,10), max = parseInt(el.max,10), v = parseInt(el.value,10);
              if (isNaN(v)) return;
              if (v < min) el.value = min; else if (v > max) el.value = max;
            });
          }
          clampInput(retentionEl); clampInput(lockCountInput);

          // Dynamic schedule fields + snap label + retention sync
          const RETENTION_UNITS_BY_TYPE = {
            'Hourly': ['Hours'],
            'Daily':  ['Days'],
            'Weekly': ['Weeks']
          };
          function updateRetentionForType(type){
            const sel = document.getElementById('SingleSchedule_RetentionUnit')
                    || document.querySelector('select[name="SingleSchedule.RetentionUnit"]');
            if (!sel) return;
            const allowed = RETENTION_UNITS_BY_TYPE[type] || ['Hours','Days','Weeks'];
            const prev = sel.value;
            sel.innerHTML = '';
            allowed.forEach(u=>{
              const opt = document.createElement('option');
              opt.value = u; opt.textContent = u;
              sel.appendChild(opt);
            });
            sel.value = allowed.includes(prev) ? prev : allowed[0];
            recalcLockingOptions();
          }
          function renderFields(type){
            const c = document.getElementById('single-schedule-fields');
            if (!c) return;
            let html='';
            if (type==='Hourly'){
              html += '<div class="mb-3"><label>Start Hour</label>'
                   +  '<input type="number" min="0" max="23" step="1" name="SingleSchedule.StartHour" class="form-control" required />'
                   +  '<div class="invalid-feedback">Required</div></div>'
                   +  '<div class="mb-3"><label>End Hour</label>'
                   +  '<input type="number" min="0" max="23" step="1" name="SingleSchedule.EndHour" class="form-control" required />'
                   +  '<div class="invalid-feedback">Required</div></div>';
            } else {
              html += '<div class="mb-3"><label>Days</label><div>';
              ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'].forEach(d=>{
                html += `<label class="me-2"><input type="checkbox" name="SingleSchedule.DaysOfWeek" value="${d}"> ${d}</label>`;
              });
              html += '</div><div class="invalid-feedback d-block">Select at least one day.</div></div>'
                   +  '<div class="mb-3"><label>Time</label>'
                   +  '<input type="time" name="SingleSchedule.Time" class="form-control" required />'
                   +  '<div class="invalid-feedback">Required</div></div>';
            }
            c.innerHTML = html;
            if (snapLabel) snapLabel.value = type.toLowerCase();
            c.querySelectorAll('input[type="number"]').forEach(clampInput);
            updateRetentionForType(type);
          }

          // Locking
          function supportsLocking(volumeName){
            return !!(volumeMeta && volumeMeta[volumeName] && volumeMeta[volumeName].SnapshotLockingEnabled);
          }
          function retentionInHours(count,unit){
            const c = parseInt(count,10); if (isNaN(c)||c<1) return 0;
            return unit==='Hours'?c:unit==='Days'?c*24:unit==='Weeks'?c*168:0;
          }
          function recalcLockingOptions(){
            if (!lockCountInput || !lockUnitSelect) return;
            const ru = document.getElementById('SingleSchedule_RetentionUnit') || document.querySelector('select[name="SingleSchedule.RetentionUnit"]');
            const totalHours = retentionInHours(retentionEl.value, ru?.value || 'Hours');
            if (totalHours <= 1){
              lockingCheckbox.checked=false; lockingCheckbox.disabled=true; lockingRetentionContainer.classList.add('d-none');
              return;
            }
            lockingCheckbox.disabled=false;
            Array.from(lockUnitSelect.options).forEach(opt=>{
              const mul = opt.value==='Days'?24:opt.value==='Weeks'?168:1;
              let maxCnt = Math.floor((totalHours-1)/mul); maxCnt = Math.min(maxCnt,30);
              opt.disabled = maxCnt < 1;
              if (opt.value === lockUnitSelect.value){
                lockCountInput.max = maxCnt;
                if (+lockCountInput.value > maxCnt) lockCountInput.value = maxCnt;
              }
            });
          }
          lockingCheckbox?.addEventListener('change', () => {
            if (lockingCheckbox.checked){ recalcLockingOptions(); lockingRetentionContainer.classList.remove('d-none'); }
            else lockingRetentionContainer.classList.add('d-none');
          });
          retentionEl?.addEventListener('input', recalcLockingOptions);
          lockUnitSelect?.addEventListener('change', recalcLockingOptions);

          // Exclude list
          function renderExcludeListFor(storage){
            const key = norm(storage);
            const items = VMS_KEYS[key] || [];
            if (!items.length){
              excludeList.innerHTML = `<div class="text-muted small p-2">No VMs found for the selected storage.</div>`;
              if (exclCount) exclCount.textContent = `0/0 selected`;
              return;
            }
            excludeList.innerHTML = items.map(vm=>{
              const isChecked = (PRESELECTED_EXCLUDES||[]).includes(vm.value) || !!vm.selected;
              const label = (vm.text||'');
              const dataLabel = label.toLowerCase().replace(/"/g,'&quot;');
              return `
                <div class="form-check exclude-row" data-label="${dataLabel}">
                  <input class="form-check-input exclude-item"
                         type="checkbox"
                         name="ExcludedVmIds"
                         value="${vm.value}"
                         ${isChecked ? 'checked' : ''} />
                  <label class="form-check-label">${label}</label>
                </div>`;
            }).join('');
            applyExcludeFilter(); updateExcludeCount();
            syncExcludeDisabledState();
          }
          function applyExcludeFilter(){
            const needle = (exclFilter?.value||'').trim().toLowerCase();
            qsa('.exclude-row', excludeList).forEach(row=>{
              const label = row.dataset.label || '';
              row.style.display = label.includes(needle) ? '' : 'none';
            });
          }
          function updateExcludeCount(){
            const visible = qsa('.exclude-row', excludeList).filter(r => r.style.display !== 'none');
            const checked = visible.filter(r => r.querySelector('.exclude-item').checked);
            if (exclCount) exclCount.textContent = `${checked.length}/${visible.length} selected`;
          }
          function setAllVisible(checked){
            qsa('.exclude-row', excludeList).forEach(row=>{
              if (row.style.display === 'none') return;
              row.querySelector('.exclude-item').checked = checked;
            });
            updateExcludeCount();
          }
          document.getElementById('exclAll')?.addEventListener('click', ()=>setAllVisible(true));
          document.getElementById('exclNone')?.addEventListener('click', ()=>setAllVisible(false));
          document.getElementById('exclInvert')?.addEventListener('click', ()=>{
            qsa('.exclude-row', excludeList).forEach(row=>{
              if (row.style.display === 'none') return;
              const cb = row.querySelector('.exclude-item'); cb.checked = !cb.checked;
            });
            updateExcludeCount();
          });
          excludeList?.addEventListener('change', e=>{ if (e.target.matches('.exclude-item')) updateExcludeCount(); });
          exclFilter?.addEventListener('input', ()=>{ applyExcludeFilter(); updateExcludeCount(); });

          // Show/Hide Exclude block based on App-aware
          function syncExcludeDisabledState(){
            const enabled = aaRadio?.checked === true;
            excludeBlock?.classList.toggle('d-none', !enabled);
            excludeBlock?.setAttribute('aria-hidden', (!enabled).toString());
            qsa('input.exclude-item, #exclFilter, #exclAll, #exclNone, #exclInvert', excludeBlock)
              .forEach(el => { el.disabled = !enabled; });
            if (!enabled){
              qsa('input.exclude-item', excludeBlock).forEach(cb => cb.checked = false);
              if (exclCount) exclCount.textContent = '0/0 selected';
            } else {
              updateExcludeCount();
            }
          }

          // Single source of truth for App-aware + Proxmox Snapshot UI
          function updateProxSnapshotUI(){
            const appAwareOn = aaRadio?.checked === true;

            // Show app-aware panel
            appOpts?.classList.toggle('d-none', !appAwareOn);

            // Mutual exclusion
            if (ioFreezeCb && proxSnapCb){
              if (proxSnapCb.checked) ioFreezeCb.checked = false;
              if (ioFreezeCb.checked) proxSnapCb.checked = false;
            }

            // With Memory visible only when app-aware + prox snapshot
            const showWithMem = appAwareOn && proxSnapCb?.checked;
            if (showWithMem) proxOpts?.classList.remove('d-none');
            else {
              proxOpts?.classList.add('d-none');
              if (withMem) withMem.checked = false;
            }
          }

          // Replication visibility
          function supportsReplicateFor(val){ return replicable.indexOf(val) !== -1; }

          // Storage change (replication/locking + cluster/controller + exclude list)
          storageSel?.addEventListener('change', function(){
            const val = storageSel.value;

            // Replication
            if (replicateBox){
              const canRep = supportsReplicateFor(val);
              replicateBox.classList.toggle('d-none', !canRep);
              if (!canRep) replicateBox.querySelector('input')?.removeAttribute('checked');
            }

            // Locking
            if (lockingCheckboxContainer && lockingCheckbox && lockingRetentionContainer){
              if (supportsLocking(val)){
                lockingCheckboxContainer.classList.remove('d-none');
                lockingCheckbox.disabled = false;
              } else {
                lockingCheckboxContainer.classList.add('d-none');
                lockingCheckbox.checked  = false;
                lockingCheckbox.disabled = true;
                lockingRetentionContainer.classList.add('d-none');
              }
              lockCountInput.value = 1; lockUnitSelect.value = 'Hours'; lockCountInput.max = 30;
              recalcLockingOptions();
            }

            // Cluster/Controller hidden fields
            const clusterInput = document.getElementById('ClusterId');
            const controllerInput = document.getElementById('ControllerId');
            if (volumeMeta[val]) {
              clusterInput.value = volumeMeta[val].ClusterId;
              controllerInput.value = volumeMeta[val].ControllerId;
            } else {
              clusterInput.value = ''; controllerInput.value = '';
            }

            // Exclude list
            renderExcludeListFor(val);
          });

          // Schedule type change
          selectType?.addEventListener('change', e => {
            const t = e.target.value;
            renderFields(t);
          });

          // Wire app-aware related handlers
          ccRadio?.addEventListener('change', () => { updateProxSnapshotUI(); syncExcludeDisabledState(); });
          aaRadio?.addEventListener('change', () => { updateProxSnapshotUI(); syncExcludeDisabledState(); });
          ioFreezeCb?.addEventListener('change', updateProxSnapshotUI);
          proxSnapCb?.addEventListener('change', updateProxSnapshotUI);

          // Initial render (order matters)
          if (selectType?.value) renderFields(selectType.value); // creates dynamic fields + sets retention unit
          storageSel?.dispatchEvent(new Event('change'));        // sets replication/locking + excludes + cluster/controller
          updateProxSnapshotUI();                                // ensures "With Memory" visibility
          syncExcludeDisabledState();                            // ensure exclude block follows app-aware

          // Submit guard
          form?.addEventListener('submit', function(e){
            if (!form.checkValidity()){ e.preventDefault(); e.stopPropagation(); }
            if (aaRadio?.checked && ioFreezeCb && proxSnapCb && !ioFreezeCb.checked && !proxSnapCb.checked){
              if (appErr) appErr.style.display='block';
              e.preventDefault(); e.stopPropagation();
            }
            // safety: keep excludes cleared when app-aware is off
            syncExcludeDisabledState();
            form.classList.add('was-validated');
          });
        });
    </script>
}
