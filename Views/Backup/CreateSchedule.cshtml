@model CreateScheduleRequest
@using System.Text.Json

@{
    ViewData["Title"] = "Create Backup Schedule";
}

<div class="mb-3 d-flex justify-content-between align-items-center">
    <h4 class="mb-0">Create Backup Schedule</h4>
    <a asp-action="Backup" asp-controller="Backup" class="btn btn-secondary">← Back to Schedules</a>
</div>

<form asp-action="CreateSchedule"
      method="post"
      class="needs-validation"
      novalidate="novalidate">

    <!-- Name -->
    <div class="mb-3">
        <label asp-for="Name" class="form-label">Backup Schedule Name</label>
        <input asp-for="Name"
               class="form-control"
               maxlength="20"
               pattern="^[A-Za-z0-9_\-]+$"
               title="Only letters, numbers, hyphens and underscores (max 20 chars)."
               oninput="validateScheduleName(this)"
               required />
        <div class="invalid-feedback">
            Only letters, numbers, hyphens and underscores are allowed (max 20 characters).
        </div>
    </div>

    <!-- Enabled -->
    <div class="mb-3 form-check">
        <input class="form-check-input" asp-for="IsEnabled" />
        <label class="form-check-label" asp-for="IsEnabled">Schedule Enabled</label>
    </div>

    <!-- Storage -->
    <div class="mb-3">
        <label class="form-label">Storage</label>
        <select asp-for="StorageName"
                class="form-select"
                asp-items="Model.StorageOptions"
                required>
            <option value="">-- Select Storage --</option>
        </select>
        <div class="invalid-feedback">Please select a storage.</div>
    </div>
    <input type="hidden" asp-for="ClusterId" id="ClusterId" />
    <input type="hidden" asp-for="ControllerId" id="ControllerId" />

    <!-- Backup Type -->
    <div class="mb-3">
        <label class="form-label">Backup Type</label><br />
        <div class="form-check form-check-inline">
            <input asp-for="IsApplicationAware"
                   class="form-check-input"
                   type="radio"
                   id="ccRadio"
                   value="false"
                   checked />
            <label class="form-check-label" for="ccRadio">Crash-Consistent</label>
        </div>
        <div class="form-check form-check-inline">
            <input asp-for="IsApplicationAware"
                   class="form-check-input"
                   type="radio"
                   id="aaRadio"
                   value="true" />
            <label class="form-check-label" for="aaRadio">Application-Aware</label>
        </div>
    </div>

    <!-- App-Aware Options -->
    <div id="appAwareOptions" class="border rounded p-3 bg-light d-none">
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   asp-for="EnableIoFreeze"
                   id="EnableIoFreeze" />
            <label class="form-check-label" for="EnableIoFreeze">Enable IO-Freeze</label>
        </div>
        <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   asp-for="UseProxmoxSnapshot"
                   id="UseProxmoxSnapshot" />
            <label class="form-check-label" for="UseProxmoxSnapshot">Create Proxmox Snapshot</label>
        </div>
        <div id="appAwareError" class="text-danger mt-2" style="display:none;">
            You must choose either IO-Freeze OR Proxmox Snapshot.
        </div>
        <div id="proxmoxSnapshotOptions" class="mt-2 ms-3 d-none">
            <div class="form-check">
                <input class="form-check-input"
                       type="checkbox"
                       asp-for="WithMemory"
                       id="WithMemory" />
                <label class="form-check-label" for="WithMemory">Include RAM (With Memory)</label>
            </div>
        </div>
    </div>

    <hr />

    <!-- Schedule Type -->
    <div class="mb-3">
        <label class="form-label">Schedule Type</label>
        <select asp-for="SingleSchedule.Type"
                id="scheduleTypeSelect"
                class="form-select"
                required>
            <option value="">-- Select Type --</option>
            <option value="Hourly">Hourly</option>
            <option value="Daily">Daily</option>
            <option value="Weekly">Weekly</option>
        </select>
        <div class="invalid-feedback">Please select a schedule type.</div>
    </div>

    <!-- Dynamic schedule fields -->
    <div id="single-schedule-fields"></div>
    <input type="hidden" asp-for="SingleSchedule.Label" id="snapmirrorLabel" />

    <!-- Retention -->
    <div class="mb-3">
        <label class="form-label">Retention</label>
        <div class="input-group">
            <select asp-for="SingleSchedule.RetentionUnit"
                    class="form-select"
                    required>
                <option value="Hours">Hours</option>
                <option value="Days">Days</option>
                <option value="Weeks">Weeks</option>
            </select>
            <input name="SingleSchedule.RetentionCount"
                   type="number"
                   min="1" max="256"
                   class="form-control"
                   id="RetentionCount"
                   required />
            <div class="invalid-feedback">
                Enter a number between 1 and 256.
            </div>
        </div>
    </div>

    <input type="hidden"
           id="replicableVolumes"
           value="@string.Join(',', Model.ReplicableVolumes ?? new HashSet<string>())" />

    <!-- Replicate to Secondary -->
    <div class="mb-3 form-check d-none" id="replicateCheckbox">
        <input class="form-check-input"
               asp-for="ReplicateToSecondary"
               id="ReplicateToSecondary" />
        <label class="form-check-label" asp-for="ReplicateToSecondary">Replicate to Secondary</label>
    </div>

    <!-- Exclude VMs -->
    <div class="mb-3">
        <label asp-for="ExcludedVmIds" class="form-label">Exclude VMs</label>
        <select asp-for="ExcludedVmIds"
                class="form-select"
                asp-items="Model.AllVms"
                multiple></select>
    </div>

    <div class="mb-3 text-end">
        <button type="submit" class="btn btn-success">Create Schedule</button>
        <a asp-action="Backup" asp-controller="Backup" class="btn btn-secondary">Cancel</a>
    </div>
</form>

<script>
    const volumeMeta = @Html.Raw(JsonSerializer.Serialize(Model.VolumeMeta));
</script>

@section Scripts {
    <script>
        // ── Global helper (must be outside DOMContentLoaded) ─────────────────
        function validateScheduleName(input) {
            input.value = input.value
                          .replace(/[^A-Za-z0-9_\\-]/g, '')
                          .slice(0, input.maxLength || 20);
        }

        document.addEventListener('DOMContentLoaded', function() {
            // ── Grab the form and all key elements ─────────────────────────────
            var form = document.querySelector('form.needs-validation');
            var nameInput = null;
            if (form) {
                nameInput = form.querySelector('input[asp-for="Name"]');
            }
            var retentionEl = document.getElementById('RetentionCount');
            var selectType  = document.getElementById('scheduleTypeSelect');
            var ccRadio     = document.getElementById('ccRadio');
            var aaRadio     = document.getElementById('aaRadio');
            var appOpts     = document.getElementById('appAwareOptions');
            var ioFreezeCb  = document.getElementById('EnableIoFreeze');
            var proxSnapCb  = document.getElementById('UseProxmoxSnapshot');
            var appErr      = document.getElementById('appAwareError');
            var proxOpts    = document.getElementById('proxmoxSnapshotOptions');
            var replicateBox= document.getElementById('replicateCheckbox');
            var replicableVolumes = document.getElementById('replicableVolumes');
            var replicable = [];
            if (replicableVolumes) {
                replicable = replicableVolumes.value.split(',');
            }
            var storageSel = null;
            if (form) {
                storageSel = form.querySelector('select[name="StorageName"]');
            }
            var snapLabel = document.getElementById('snapmirrorLabel');

            // ── Name field enforcement ─────────────────────────────────────────
            if (nameInput) {
                // block invalid keystrokes
                nameInput.addEventListener('keypress', function(e) {
                    var ch = e.key;
                    if (!/^[A-Za-z0-9_-]$/.test(ch)) {
                        e.preventDefault();
                    }
                });
                // sanitize pasted text
                nameInput.addEventListener('paste', function(e) {
                    e.preventDefault();
                    var text = (e.clipboardData || window.clipboardData)
                                .getData('text/plain')
                                .replace(/[^A-Za-z0-9_-]/g, '')
                                .slice(0, this.maxLength || 20);
                    document.execCommand('insertText', false, text);
                });
                // fallback on every input
                nameInput.addEventListener('input', function() {
                    validateScheduleName(this);
                });
            }

            // ── Numeric‐only + clamp helper ─────────────────────────────────────
            function blockNonNumeric(e) {
                var k = e.key;
                if (k === 'e' || k === 'E' || k === '+' || k === '-' || k === '.') {
                    e.preventDefault();
                }
            }
            function clampInput(el) {
                if (!el) return;
                el.addEventListener('keydown', blockNonNumeric);
                el.addEventListener('input', function() {
                    var min = parseInt(el.min, 10),
                        max = parseInt(el.max, 10),
                        v   = parseInt(el.value, 10);
                    if (isNaN(v)) return;
                    if (v < min) el.value = min;
                    else if (v > max) el.value = max;
                });
            }
            clampInput(retentionEl);

            // ── Dynamic schedule fields renderer ─────────────────────────────────
            function renderFields(type) {
                var container = document.getElementById('single-schedule-fields');
                if (!container) return;
                var html = '';
                if (type === 'Hourly') {
                    html += '<div class="mb-3"><label>Start Hour</label>'
                         + '<input type="number" min="0" max="23" step="1" '
                         +   'name="SingleSchedule.StartHour" class="form-control" required />'
                         + '<div class="invalid-feedback">Required</div></div>'
                         + '<div class="mb-3"><label>End Hour</label>'
                         + '<input type="number" min="0" max="23" step="1" '
                         +   'name="SingleSchedule.EndHour" class="form-control" required />'
                         + '<div class="invalid-feedback">Required</div></div>';
                } else {
                    html += '<div class="mb-3"><label>Days</label><div>';
                    var days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];
                    for (var i = 0; i < days.length; i++) {
                        html += '<label class="me-2">'
                              + '<input type="checkbox" name="SingleSchedule.DaysOfWeek" value="'
                              + days[i] + '" /> ' + days[i]
                              + '</label>';
                    }
                    html += '</div><div class="invalid-feedback d-block">'
                         + 'Select at least one day.</div></div>'
                         + '<div class="mb-3"><label>Time</label>'
                         + '<input type="time" name="SingleSchedule.Time" '
                         +    'class="form-control" required />'
                         + '<div class="invalid-feedback">Required</div></div>';
                }
                container.innerHTML = html;
                if (snapLabel) {
                    snapLabel.value = type.toLowerCase();
                }
                // clamp any new number inputs
                var nums = container.querySelectorAll('input[type="number"]');
                for (var j = 0; j < nums.length; j++) {
                    clampInput(nums[j]);
                }
            }

            // ── Toggle Application-Aware panel ───────────────────────────────────
            function toggleAppAware() {
                var show = aaRadio && aaRadio.checked;
                if (appOpts) {
                    appOpts.classList.toggle('d-none', !show);
                }
                if (!show && ioFreezeCb && proxSnapCb && proxOpts && appErr) {
                    ioFreezeCb.checked  = false;
                    proxSnapCb.checked  = false;
                    proxOpts.classList.add('d-none');
                    appErr.style.display = 'none';
                }
            }

            // ── Wire up event handlers ─────────────────────────────────────────
            if (selectType) {
                selectType.addEventListener('change', function(e) {
                    renderFields(e.target.value);
                });
                // initial render if type was pre-selected
                if (selectType.value) {
                    renderFields(selectType.value);
                }
            }
            if (ccRadio) ccRadio.addEventListener('change', toggleAppAware);
            if (aaRadio) aaRadio.addEventListener('change', toggleAppAware);

            if (ioFreezeCb) {
                ioFreezeCb.addEventListener('change', function() {
                    if (ioFreezeCb.checked && proxSnapCb && proxOpts) {
                        proxSnapCb.checked = false;
                        proxOpts.classList.add('d-none');
                    }
                });
            }
            if (proxSnapCb) {
                proxSnapCb.addEventListener('change', function() {
                    if (proxSnapCb.checked && ioFreezeCb && proxOpts) {
                        ioFreezeCb.checked = false;
                        proxOpts.classList.remove('d-none');
                    } else if (proxOpts) {
                        proxOpts.classList.add('d-none');
                    }
                });
            }

        if (storageSel) {
            storageSel.addEventListener('change', function () {
                if (!replicateBox) return;

                var val = storageSel.value;

                // Set replicate checkbox visibility
                if (replicable.indexOf(val) !== -1) {
                    replicateBox.classList.remove('d-none');
                } else {
                    replicateBox.classList.add('d-none');
                    var cb = replicateBox.querySelector('input');
                    if (cb) cb.checked = false;
                }

                // Set hidden ClusterId and ControllerId
                var clusterInput = document.getElementById('ClusterId');
                var controllerInput = document.getElementById('ControllerId');
                if (volumeMeta[val]) {
                    clusterInput.value = volumeMeta[val].ClusterId;
                    controllerInput.value = volumeMeta[val].ControllerId;
                } else {
                    clusterInput.value = "";
                    controllerInput.value = "";
                }
            });

            // initialize on load
            storageSel.dispatchEvent(new Event('change'));
        }

            if (form) {
                form.addEventListener('submit', function(e) {
                    if (!form.checkValidity()) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    if (aaRadio && aaRadio.checked &&
                        ioFreezeCb && proxSnapCb && !ioFreezeCb.checked && !proxSnapCb.checked) {
                        if (appErr) appErr.style.display = 'block';
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    form.classList.add('was-validated');
                });
            }
        });
    </script>
}

